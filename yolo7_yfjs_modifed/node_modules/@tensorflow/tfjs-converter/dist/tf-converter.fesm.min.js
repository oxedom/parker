/**
 * @license
 * Copyright 2022 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import*as t from"@tensorflow/tfjs-core";import{env as e,util as n,clone as r,scalar as s,keep as a,tensor as o,stack as i,concat as u,unstack as p,tidy as l,reshape as c,slice as h,io as d,Tensor as m}from"@tensorflow/tfjs-core";var f,y;e().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(t=>{t&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_QINT16=15]="DT_QINT16",t[t.DT_QUINT16=16]="DT_QUINT16",t[t.DT_UINT16=17]="DT_UINT16",t[t.DT_COMPLEX128=18]="DT_COMPLEX128",t[t.DT_HALF=19]="DT_HALF",t[t.DT_RESOURCE=20]="DT_RESOURCE",t[t.DT_VARIANT=21]="DT_VARIANT",t[t.DT_UINT32=22]="DT_UINT32",t[t.DT_UINT64=23]="DT_UINT64",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",t[t.DT_QINT16_REF=115]="DT_QINT16_REF",t[t.DT_QUINT16_REF=116]="DT_QUINT16_REF",t[t.DT_UINT16_REF=117]="DT_UINT16_REF",t[t.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",t[t.DT_HALF_REF=119]="DT_HALF_REF",t[t.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",t[t.DT_VARIANT_REF=121]="DT_VARIANT_REF",t[t.DT_UINT32_REF=122]="DT_UINT32_REF",t[t.DT_UINT64_REF=123]="DT_UINT64_REF"}(f||(f={})),function(t){var e;(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(y||(y={}));const g={};function b(t,e){const n={tfOpName:t,category:"custom",inputs:[],attrs:[],customExecutor:e};g[t]=n}function x(t){return g[t]}function N(t){delete g[t]}function k(t,e,r,s,a){const o=e.inputParams[t];if(o&&void 0!==o.inputIndexStart){const t=o.inputIndexStart,i=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?t+1:o.inputIndexEnd;if("tensor"===o.type)return w(e.inputNames[o.inputIndexStart],r,s,a);if("tensors"===o.type){return e.inputNames.slice(t,i).map((t=>w(t,r,s,a)))}const u=w(e.inputNames.slice(t)[0],r,s,a),p=u.dataSync();return"number"===o.type?p[0]:n.toNestedArray(u.shape,p)}const i=e.attrParams[t];return i&&i.value}function w(t,e,n,r){const[s,a]=v(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const o=n.currentContextIds.find((t=>!!e[_(s,t)]));return void 0!==o?e[_(s,o)][a]:void 0}function T(t,e){const[n,r,s]=v(t);return[_(n,e&&e.currentContextId),r,s]}function _(t,e){return e?`${t}-${e}`:t}function v(t){const e=t.split(":");if(1===e.length)return[t,0,void 0];const n=e[0],r=3===e.length?e[1]:void 0;return[n,Number(e[e.length-1]),r]}function S(t,e,n){let r=k("pad",t,e,n);if("explicit"===r){r=k("explicitPaddings",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function E(t){return t.kept?t:r(t)}var $={__proto__:null,json:[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var I={__proto__:null,json:[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var D={__proto__:null,json:[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]};var A={__proto__:null,json:[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]};var O={__proto__:null,json:[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]};var M={__proto__:null,json:[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var F={__proto__:null,json:[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]};var C={__proto__:null,json:[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]};var V={__proto__:null,json:[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]};var R={__proto__:null,json:[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}]};var z={__proto__:null,json:[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]};var L={__proto__:null,json:[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]};var B={__proto__:null,json:[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]};var P={__proto__:null,json:[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]};var K={__proto__:null,json:[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]};var q={__proto__:null,json:[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]};var j={__proto__:null,json:[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]};var U={__proto__:null,json:[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]};var W={__proto__:null,json:[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]};class H{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[$,I,D,A,O,M,F,C,V,R,z,L,B,P,K,q,j,U,W].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],a=[],o=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||a.push(t[e.name]),t)),{});let i=[];const u=[];let p={},l={};null!=e&&(p=this.mapSignatureEntries(e.inputs),l=this.mapSignatureEntries(e.outputs));const c=Object.keys(o);c.forEach((t=>{const e=o[t];e.inputNames.forEach(((t,n)=>{const[r,,s]=T(t),a=o[r];if(null!=a.outputs){const t=a.outputs.indexOf(s);if(-1!==t){const s=`${r}:${t}`;e.inputNames[n]=s}}e.inputs.push(a),a.children.push(e)}))})),0===Object.keys(l).length?c.forEach((t=>{const e=o[t];0===e.children.length&&u.push(e)})):Object.keys(l).forEach((t=>{const[e]=T(t),n=o[e];null!=n&&(n.signatureKey=l[t],u.push(n))})),Object.keys(p).length>0?Object.keys(p).forEach((t=>{const[e]=T(t),n=o[e];n&&(n.signatureKey=p[t],i.push(n))})):i=r;let h={};null!=t.library&&null!=t.library.function&&(h=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:e,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=x(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case"string":s=Z(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Z(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=at(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=at(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=Y(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=Y(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=st(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=st(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Q(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Q(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=it(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=it(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=rt(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=rt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=ot(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ot(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=tt(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=tt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=et(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=et(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=J(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=J(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const s=[],a=[];t.signature.inputArg.forEach((t=>{const[e]=T(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:X(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach(((t,n)=>{const[s,,a]=T(t),o=r[s];if(null!=o.outputs){const t=o.outputs.indexOf(a);if(-1!==t){const r=`${s}:${t}`;e.inputNames[n]=r}}e.inputs.push(o),o.children.push(e)}))}));const o=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=T(o[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function G(t,n){const r=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const n=e().global;if("undefined"!=typeof n.atob)return n.atob(t);if("undefined"!=typeof Buffer)return new Buffer(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return n?r:r.toLowerCase()}function Z(t,e,n,r=!1){const s=t[e];return null!=s?G(s.s,r):n}function Q(t,e,n){const r=t[e];return r?r.b:n}function Y(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function X(t){switch("string"==typeof t&&(t=f[t]),t){case f.DT_FLOAT:case f.DT_HALF:return"float32";case f.DT_INT32:case f.DT_INT64:case f.DT_INT8:case f.DT_UINT8:return"int32";case f.DT_BOOL:return"bool";case f.DT_DOUBLE:return"float32";case f.DT_STRING:return"string";default:return null}}function J(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function tt(t,e,n){const r=t[e];return r&&r.type?X(r.type):n}function et(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>X(t))):n}function nt(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"==typeof t.size?t.size:parseInt(t.size,10))):[]}function rt(t,e,n){const r=t[e];return r&&r.shape?nt(r.shape):n}function st(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"==typeof t?t:parseInt(t,10))):n}function at(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>G(t,r))):n}function ot(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>nt(t))):n}function it(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class ut{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return w(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return w(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Y(this.node.rawAttrs,t,e);if(null!=n.s)return Z(this.node.rawAttrs,t,e);if(null!=n.b)return Q(this.node.rawAttrs,t,e);if(null!=n.shape)return rt(this.node.rawAttrs,t,e);if(null!=n.type)return tt(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return st(this.node.rawAttrs,t,e);if(null!=n.list.s)return at(this.node.rawAttrs,t,e);if(null!=n.list.shape)return ot(this.node.rawAttrs,t,e);if(null!=n.list.b)return it(this.node.rawAttrs,t,e);if(null!=n.list.type)return et(this.node.rawAttrs,t,e)}return e}}function pt(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function lt(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function ct(t,e,n=""){lt(ft(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function ht(t){lt(null!=t,(()=>"The input to the tensor constructor must be a non-null value."))}function dt(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||xt(t)&&!n)for(let r=0;r<t.length;++r)dt(t[r],e,n);else e.push(t);return e}function mt(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function ft(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function yt(t){return t%1==0}function gt(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function bt(t,e){const n=e.length;return lt((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),lt(t.every((t=>yt(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function xt(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray}function Nt(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function kt(t){return"string"==typeof t||t instanceof String}function wt(t){return Array.isArray(t)?wt(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array||t instanceof Uint8ClampedArray?"int32":"number"==typeof t?"float32":kt(t)?"string":function(t){return"boolean"==typeof t}(t)?"bool":"float32"}function Tt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function _t(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function vt(t,e,n,r=!1){const s=new Array;if(1===e.length){const a=e[0]*(r?2:1);for(let e=0;e<a;e++)s[e]=n[t+e]}else{const a=e[0],o=e.slice(1),i=o.reduce(((t,e)=>t*e))*(r?2:1);for(let e=0;e<a;e++)s[e]=vt(t+e*i,o,n,r)}return s}function St(t,e,n=!1){if(0===t.length)return e[0];const r=t.reduce(((t,e)=>t*e))*(n?2:1);if(0===r)return[];if(r!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}${n?" for a complex tensor":""}.`);return vt(0,t,e,n)}function Et(t,e){const n=$t(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function $t(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function It(t){t.forEach((e=>{lt(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function Dt(t){return t&&t.then&&"function"==typeof t.then}class At{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ot,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(Mt().getBool("IS_TEST")||Mt().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];Mt().getBool("IS_TEST")||Mt().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Dt(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"==typeof this.global||"undefined"==typeof this.global.location||"undefined"==typeof this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);if("tfjsflags"in t){t.tfjsflags.split(",").forEach((t=>{const[e,n]=t.split(":");this.urlFlags[e]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}}function Ot(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")))),e}function Mt(){return Ct}let Ft,Ct=null;function Vt(){if(null==Ft){let t;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Ft=t}return Ft}function Rt(t,e){const n=function(){const t=Vt();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}function zt(...t){Mt().getBool("IS_TEST")||Mt().getBool("PROD")||console.warn(...t)}const Lt=Rt("kernelRegistry",(()=>new Map)),Bt=Rt("gradRegistry",(()=>new Map));function Pt(t,e){const n=function(t,e){return`${e}_${t}`}(t,e);return Lt.get(n)}function Kt(t){return Bt.get(t)}function qt(t){const e=Lt.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===t&&n.push(o)}return n}var jt=Wt,Ut=null;try{Ut=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function Wt(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function Ht(t){return!0===(t&&t.__isLong__)}Wt.prototype.__isLong__,Object.defineProperty(Wt.prototype,"__isLong__",{value:!0}),Wt.isLong=Ht;var Gt={},Zt={};function Qt(t,e){var n,r,s;return e?(s=0<=(t>>>=0)&&t<256)&&(r=Zt[t])?r:(n=Xt(t,(0|t)<0?-1:0,!0),s&&(Zt[t]=n),n):(s=-128<=(t|=0)&&t<128)&&(r=Gt[t])?r:(n=Xt(t,t<0?-1:0,!1),s&&(Gt[t]=n),n)}function Yt(t,e){if(isNaN(t))return e?ie:oe;if(e){if(t<0)return ie;if(t>=re)return he}else{if(t<=-se)return de;if(t+1>=se)return ce}return t<0?Yt(-t,e).neg():Xt(t%ne|0,t/ne|0,e)}function Xt(t,e,n){return new Wt(t,e,n)}Wt.fromInt=Qt,Wt.fromNumber=Yt,Wt.fromBits=Xt;var Jt=Math.pow;function te(t,e,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return oe;if("number"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return te(t.substring(1),e,n).neg();for(var s=Yt(Jt(n,8)),a=oe,o=0;o<t.length;o+=8){var i=Math.min(8,t.length-o),u=parseInt(t.substring(o,o+i),n);if(i<8){var p=Yt(Jt(n,i));a=a.mul(p).add(Yt(u))}else a=(a=a.mul(s)).add(Yt(u))}return a.unsigned=e,a}function ee(t,e){return"number"==typeof t?Yt(t,e):"string"==typeof t?te(t,e):Xt(t.low,t.high,"boolean"==typeof e?e:t.unsigned)}Wt.fromString=te,Wt.fromValue=ee;var ne=4294967296,re=ne*ne,se=re/2,ae=Qt(1<<24),oe=Qt(0);Wt.ZERO=oe;var ie=Qt(0,!0);Wt.UZERO=ie;var ue=Qt(1);Wt.ONE=ue;var pe=Qt(1,!0);Wt.UONE=pe;var le=Qt(-1);Wt.NEG_ONE=le;var ce=Xt(-1,2147483647,!1);Wt.MAX_VALUE=ce;var he=Xt(-1,-1,!0);Wt.MAX_UNSIGNED_VALUE=he;var de=Xt(0,-2147483648,!1);Wt.MIN_VALUE=de;var me=Wt.prototype;me.toInt=function(){return this.unsigned?this.low>>>0:this.low},me.toNumber=function(){return this.unsigned?(this.high>>>0)*ne+(this.low>>>0):this.high*ne+(this.low>>>0)},me.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(de)){var e=Yt(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var s=Yt(Jt(t,6),this.unsigned),a=this,o="";;){var i=a.div(s),u=(a.sub(i.mul(s)).toInt()>>>0).toString(t);if((a=i).isZero())return u+o;for(;u.length<6;)u="0"+u;o=""+u+o}},me.getHighBits=function(){return this.high},me.getHighBitsUnsigned=function(){return this.high>>>0},me.getLowBits=function(){return this.low},me.getLowBitsUnsigned=function(){return this.low>>>0},me.getNumBitsAbs=function(){if(this.isNegative())return this.eq(de)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},me.isZero=function(){return 0===this.high&&0===this.low},me.eqz=me.isZero,me.isNegative=function(){return!this.unsigned&&this.high<0},me.isPositive=function(){return this.unsigned||this.high>=0},me.isOdd=function(){return 1==(1&this.low)},me.isEven=function(){return 0==(1&this.low)},me.equals=function(t){return Ht(t)||(t=ee(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},me.eq=me.equals,me.notEquals=function(t){return!this.eq(t)},me.neq=me.notEquals,me.ne=me.notEquals,me.lessThan=function(t){return this.comp(t)<0},me.lt=me.lessThan,me.lessThanOrEqual=function(t){return this.comp(t)<=0},me.lte=me.lessThanOrEqual,me.le=me.lessThanOrEqual,me.greaterThan=function(t){return this.comp(t)>0},me.gt=me.greaterThan,me.greaterThanOrEqual=function(t){return this.comp(t)>=0},me.gte=me.greaterThanOrEqual,me.ge=me.greaterThanOrEqual,me.compare=function(t){if(Ht(t)||(t=ee(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},me.comp=me.compare,me.negate=function(){return!this.unsigned&&this.eq(de)?de:this.not().add(ue)},me.neg=me.negate,me.add=function(t){Ht(t)||(t=ee(t));var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=t.high>>>16,o=65535&t.high,i=t.low>>>16,u=0,p=0,l=0,c=0;return l+=(c+=s+(65535&t.low))>>>16,p+=(l+=r+i)>>>16,u+=(p+=n+o)>>>16,u+=e+a,Xt((l&=65535)<<16|(c&=65535),(u&=65535)<<16|(p&=65535),this.unsigned)},me.subtract=function(t){return Ht(t)||(t=ee(t)),this.add(t.neg())},me.sub=me.subtract,me.multiply=function(t){if(this.isZero())return oe;if(Ht(t)||(t=ee(t)),Ut)return Xt(Ut.mul(this.low,this.high,t.low,t.high),Ut.get_high(),this.unsigned);if(t.isZero())return oe;if(this.eq(de))return t.isOdd()?de:oe;if(t.eq(de))return this.isOdd()?de:oe;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(ae)&&t.lt(ae))return Yt(this.toNumber()*t.toNumber(),this.unsigned);var e=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,a=t.high>>>16,o=65535&t.high,i=t.low>>>16,u=65535&t.low,p=0,l=0,c=0,h=0;return c+=(h+=s*u)>>>16,l+=(c+=r*u)>>>16,c&=65535,l+=(c+=s*i)>>>16,p+=(l+=n*u)>>>16,l&=65535,p+=(l+=r*i)>>>16,l&=65535,p+=(l+=s*o)>>>16,p+=e*u+n*i+r*o+s*a,Xt((c&=65535)<<16|(h&=65535),(p&=65535)<<16|(l&=65535),this.unsigned)},me.mul=me.multiply,me.divide=function(t){if(Ht(t)||(t=ee(t)),t.isZero())throw Error("division by zero");var e,n,r;if(Ut)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?Xt((this.unsigned?Ut.div_u:Ut.div_s)(this.low,this.high,t.low,t.high),Ut.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?ie:oe;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return ie;if(t.gt(this.shru(1)))return pe;r=ie}else{if(this.eq(de))return t.eq(ue)||t.eq(le)?de:t.eq(de)?ue:(e=this.shr(1).div(t).shl(1)).eq(oe)?t.isNegative()?ue:le:(n=this.sub(t.mul(e)),r=e.add(n.div(t)));if(t.eq(de))return this.unsigned?ie:oe;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=oe}for(n=this;n.gte(t);){e=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var s=Math.ceil(Math.log(e)/Math.LN2),a=s<=48?1:Jt(2,s-48),o=Yt(e),i=o.mul(t);i.isNegative()||i.gt(n);)i=(o=Yt(e-=a,this.unsigned)).mul(t);o.isZero()&&(o=ue),r=r.add(o),n=n.sub(i)}return r},me.div=me.divide,me.modulo=function(t){return Ht(t)||(t=ee(t)),Ut?Xt((this.unsigned?Ut.rem_u:Ut.rem_s)(this.low,this.high,t.low,t.high),Ut.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},me.mod=me.modulo,me.rem=me.modulo,me.not=function(){return Xt(~this.low,~this.high,this.unsigned)},me.and=function(t){return Ht(t)||(t=ee(t)),Xt(this.low&t.low,this.high&t.high,this.unsigned)},me.or=function(t){return Ht(t)||(t=ee(t)),Xt(this.low|t.low,this.high|t.high,this.unsigned)},me.xor=function(t){return Ht(t)||(t=ee(t)),Xt(this.low^t.low,this.high^t.high,this.unsigned)},me.shiftLeft=function(t){return Ht(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?Xt(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):Xt(0,this.low<<t-32,this.unsigned)},me.shl=me.shiftLeft,me.shiftRight=function(t){return Ht(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?Xt(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):Xt(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},me.shr=me.shiftRight,me.shiftRightUnsigned=function(t){if(Ht(t)&&(t=t.toInt()),0===(t&=63))return this;var e=this.high;return t<32?Xt(this.low>>>t|e<<32-t,e>>>t,this.unsigned):Xt(32===t?e:e>>>t-32,0,this.unsigned)},me.shru=me.shiftRightUnsigned,me.shr_u=me.shiftRightUnsigned,me.toSigned=function(){return this.unsigned?Xt(this.low,this.high,!1):this},me.toUnsigned=function(){return this.unsigned?this:Xt(this.low,this.high,!0)},me.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},me.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},me.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},Wt.fromBytes=function(t,e,n){return n?Wt.fromBytesLE(t,e):Wt.fromBytesBE(t,e)},Wt.fromBytesLE=function(t,e){return new Wt(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},Wt.fromBytesBE=function(t,e){return new Wt(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)};const fe=jt||Object.assign(Object.create(null),jt,{default:jt});function ye(t){return fe.fromString(t,!0,16)}function ge(t,e){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=dt(t)),Mt().getBool("DEBUG")&&function(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function be(){return Mt().platform.now()}function xe(t,e="utf-8"){return e=e||"utf-8",Mt().platform.decode(t,e)}ye("c3a5c85c97cb3127"),ye("b492b66fbe98f273"),ye("9ae16a3b2f90404f");class Ne{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new we)}profileKernel(t,e,n){let r;const s=()=>{r=n()};let a;const o=be();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const t of r)t.dataSync();a=Promise.resolve({kernelMs:be()-o})}if(Mt().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{ke(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then((t=>t.kernelMs)),extraInfo:a.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:a}=t;n.forEach((t=>{Promise.all([t.data(),r,a]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function ke(t,e,n){if("float32"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class we{logKernelProfile(t,e,n,r,s,a){const o="number"==typeof r?gt(`${r}ms`,9):r.error,i=gt(t,25),u=e.rank,p=e.size,l=gt(e.shape.toString(),14);let c="";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;c+=`${t}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${l}\t%c${p}\t%c${c}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Te(t,e,n,r){const s=_t(e),a=function(t,e,n,r){const s=mt(e),a=r[r.length-1],o=new Array(a).fill(0),i=e.length,u="complex64"===n?Ee(t):t;if(i>1)for(let t=0;t<s/a;t++){const e=t*a;for(let t=0;t<a;t++)o[t]=Math.max(o[t],_e(u[e+t],0,n).length)}return o}(t,e,n,s),o=e.length,i=Se(t,e,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${e}]`),u.push("  values:")),u.push(i.map((t=>"    "+t)).join("\n")),u.join("\n")}function _e(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:kt(t)?`'${t}'`:"bool"===n?ve(t):parseFloat(t.toFixed(7)).toString(),gt(r,e)}function ve(t){return 0===t?"false":"true"}function Se(t,e,n,r,s,a=!0){const o="complex64"===n?2:1,i=e[0],u=e.length;if(0===u){if("complex64"===n){return[_e(Ee(t)[0],0,n)]}return"bool"===n?[ve(t[0])]:[t[0].toString()]}if(1===u){if(i>20){const e=3*o;let r=Array.from(t.slice(0,e)),a=Array.from(t.slice((i-3)*o,i*o));return"complex64"===n&&(r=Ee(r),a=Ee(a)),["["+r.map(((t,e)=>_e(t,s[e],n))).join(", ")+", ..., "+a.map(((t,e)=>_e(t,s[i-3+e],n))).join(", ")+"]"]}return["["+("complex64"===n?Ee(t):Array.from(t)).map(((t,e)=>_e(t,s[e],n))).join(", ")+"]"]}const p=e.slice(1),l=r.slice(1),c=r[0]*o,h=[];if(i>20){for(let e=0;e<3;e++){const r=e*c,a=r+c;h.push(...Se(t.slice(r,a),p,n,l,s,!1))}h.push("...");for(let e=i-3;e<i;e++){const r=e*c,a=r+c;h.push(...Se(t.slice(r,a),p,n,l,s,e===i-1))}}else for(let e=0;e<i;e++){const r=e*c,a=r+c;h.push(...Se(t.slice(r,a),p,n,l,s,e===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let t=1;t<h.length-1;t++)h[t]=" "+h[t]+d;let m=",\n";for(let t=2;t<u;t++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":m),h}function Ee(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class $e{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=mt(t),null!=n){const t=n.length;lt(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||function(t,e){let n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}(e,this.size),this.strides=_t(t)}set(t,...e){0===e.length&&(e=[0]),lt(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Ie().makeTensor(this.values,this.shape,this.dtype)}}let Ie=null;class De{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=mt(t),this.strides=_t(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return null.buffer(this.shape,this.dtype,t)}bufferSync(){return null.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return St(this.shape,t,"complex64"===this.dtype)}arraySync(){return St(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const t=Ie().read(this.dataId);if("string"===this.dtype){const e=await t;try{return e.map((t=>xe(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return t}dataToGPU(t){return this.throwIfDisposed(),Ie().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=Ie().readSync(this.dataId);if("string"===this.dtype)try{return t.map((t=>xe(t)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}async bytes(){this.throwIfDisposed();const t=await Ie().read(this.dataId);return"string"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Ie().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return null.print(this,t)}clone(){return this.throwIfDisposed(),null.clone(this)}toString(t=!1){return Te(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),null.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Ie().makeVariable(this,t,e,n)}}Object.defineProperty(De,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}),Rt("Tensor",(()=>De));class Ae extends De{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!ft(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Ie().disposeTensor(this),this.dataId=t.dataId,Ie().incRef(this,null)}dispose(){Ie().disposeVariable(this),this.isDisposedInternal=!0}}var Oe,Me,Fe,Ce,Ve;Object.defineProperty(Ae,Symbol.hasInstance,{value:t=>t instanceof De&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Oe||(Oe={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(Me||(Me={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(Fe||(Fe={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(Ce||(Ce={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(Ve||(Ve={}));const Re={float32:Ce,int32:Me,bool:Fe,complex64:Ve};function ze(t,e){if(t.dtype===e.dtype)return[t,e];const n=function(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error(`Can not upcast ${t} with ${e}`)}return Re[t][e]}(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Le(t){const e=[];return Be(t,e,new Set),e}function Be(t,e,n){if(null==t)return;if(t instanceof De)return void e.push(t);if(r=t,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),Be(r,e,n))}}function Pe(t){return null!=t.kernelName}class Ke{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((t=>t.name))))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class qe{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ke}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(zt(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Ne(this.backendInstance),!0}setupRegisteredKernels(){qt(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){qt(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof class{refCount(t){return pt("refCount")}incRef(t){return pt("incRef")}timerAvailable(){return!0}time(t){return pt("time")}read(t){return pt("read")}readSync(t){return pt("readSync")}readToGPU(t,e){return pt("readToGPU")}numDataIds(){return pt("numDataIds")}disposeData(t,e){return pt("disposeData")}write(t,e,n){return pt("write")}move(t,e,n,r,s){return pt("move")}memory(){return pt("memory")}floatPrecision(){return pt("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return pt("dispose")}}||"function"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId)&&(this.registry[t]=n,this.pendingBackendInit=null,!0))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,zt(`Initialization of backend ${t} failed`),zt(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return zt(`Initialization of backend ${t} failed`),zt(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e),a=r.refCount(e);r.disposeData(e,!0),n.backend=t,t.move(e,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return qe.nextTensorId++}nextVariableId(){return qe.nextVariableId++}clone(t){const e=je.runKernel("Identity",{x:t}),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e={x:t},n={dtype:"float32"};return je.runKernel("Cast",e,n)}})),[],{}),e}runKernel(t,e,n){null==this.backendName&&this.backend;if(!(null!=Pt(t,this.backendName)))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+="complex64"===t.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-e-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${t}'`)}runKernelFunc(t){let e,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Pe(t)?t.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Pe(t)){const{kernelName:e,inputs:s,attrs:a}=t;null==this.backendName&&this.backend;const u=Pt(e,this.backendName);lt(null!=u,(()=>`Cannot find registered kernel '${e}' for backend '${this.backendName}'`)),o=()=>{const t=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(e,t,o);const p=o.map((t=>{if(null!=t.rank)return t;const{dataId:e,shape:n,dtype:r}=t;return this.makeTensorFromDataId(e,n,r)}));if(r){const t=this.getTensorsForGradient(e,s,p);n=this.saveTensorsForBackwardMode(t)}return p}}else{const{forwardFunc:e}=t,s=t=>{r&&(n=t.map((t=>this.keep(this.clone(t)))))};o=()=>{const t=this.backend.numDataIds();i=this.tidy((()=>e(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,t,n),n}}const{inputs:p,attrs:l}=t,c=Pe(t)?null:t.backwardsFunc;let h;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,p,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),e=h.outputs):e=o()})),r&&this.addTapeNode(u,p,e,c,n,l),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(p).map((t=>null!=p[t]?p[t].shape:null)),outputShapes:e.map((t=>t.shape)),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?e:e[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=Kt(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(lt(Array.isArray(e),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(e).map((t=>e[t]))):a=t.map((t=>e[t]));const o=n.filter(((t,e)=>s[e]));return a.concat(o)}return[]}makeTensor(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=t;"string"===n&&kt(t[0])&&(s=t.map((t=>function(t,e="utf-8"){return e=e||"utf-8",Mt().platform.encode(t,e)}(t))));const a=r.write(s,e,n),o=new De(e,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const t=this.state.tensorInfo.get(a),e=function(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return o}makeTensorFromDataId(t,e,n,r){const s=new De(e,n=n||"float32",t,this.nextTensorId());return this.trackTensor(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new Ae(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(n=t.size*Nt(t.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n})),t instanceof Ae||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;const e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,"string"===t.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),"complex64"!==t.dtype&&"string"!==t.dtype){const e=t.size*Nt(t.dtype);this.state.numBytes-=e}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},i=Kt(t);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=$t(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,a))),this.state.activeTape.push(o)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=Le(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(lt(e.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",t)));lt(s instanceof De,(()=>"The result y returned by f() must be a tensor."));const a=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const a=t[n],o=a.inputs;for(const t in o){const n=o[t];let i=!1;for(let t=0;t<e.length;t++)if(r[n.id]){a.outputs.forEach((t=>r[t.id]=!0)),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(a[n.outputs[t].id]){for(const t in r)a[r[t].id]=!0,o[n.id]=!0;break}}const i=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&o[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,i.push(e)}}return i}(this.state.activeTape,e,s);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const t={};t[s.id]=null==n?function(t){const e=Et(mt(t),"float32");return je.makeTensor(e,t,"float32")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const a=e[s],o=[];if(a.outputs.forEach((e=>{const n=t[e.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const e in a.inputs){if(!(e in i))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[e]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[e];if(!ft(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==t[o.id])t[o.id]=s;else{const e=t[o.id];t[o.id]=r(e,s),e.dispose()}}}}(t,a,(t=>this.tidy(t)),Ue);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return lt(Tt(t),(()=>"The f passed in customGrad(f) must be a function.")),(...e)=>{let n;lt(e.every((t=>t instanceof De)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const r={};e.forEach(((t,e)=>{r[e]=t}));return this.runKernelFunc({forwardFunc:(r,s)=>(n=t(...e,s),lt(n.value instanceof De,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),lt(Tt(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(t,r)=>{const s=n.gradFunc(t,r),a=Array.isArray(s)?s:[s];lt(a.length===e.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),lt(a.every((t=>t instanceof De)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((t,e)=>{o[e]=()=>t})),o},inputs:r})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}readToGPU(t,e){return this.state.tensorInfo.get(t).backend.readToGPU(t,e)}async time(t){const e=be(),n=await this.backend.time(t);return n.wallMs=be()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ke;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}qe.nextTensorId=0,qe.nextVariableId=0;const je=function(){const t=Vt();if(null==t._tfengine){const e=new At(t);t._tfengine=new qe(e)}var e;return e=t._tfengine.ENV,Ct=e,Ie=()=>t._tfengine,t._tfengine}();function Ue(t,e){const n={a:t,b:e};return je.runKernel("Add",n)}function We(t,e){let n=t;if(xt(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||xt(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&Mt().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&He(t,r,[]),r}function He(t,e,n){if(n=n||[],!Array.isArray(t)&&!xt(t))return void lt(0===e.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));lt(e.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${t.length} elements`)),lt(t.length===e[0],(()=>`Element arr[${n.join("][")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)He(t[e],r,n.concat(e))}function Ge(t,e,n,r){if("string_or_numeric"!==t){if(null==t)throw new Error("Expected dtype cannot be null.");if("numeric"!==t&&t!==e||"numeric"===t&&"string"===e)throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}}function Ze(t,e,n,r="numeric"){if(t instanceof De)return Ge(r,t.dtype,e,n),t;let s=wt(t);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),Ge(r,s,e,n),null==t||!xt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){const r=null==t?"null":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=We(t,s);xt(t)||Array.isArray(t)||(t=[t]);const o="string"!==s?ge(t,s):dt(t,[],!0);return je.makeTensor(o,a,s)}function Qe(t,e,n,r="numeric"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return t.map(((t,s)=>Ze(t,`${e}[${s}]`,n,r)))}function Ye(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const s=(...t)=>{je.startScope(n);try{const e=r(...t);return Dt(e)&&console.error("Cannot return a Promise inside of tidy."),je.endScope(e),e}catch(t){throw je.endScope(null),t}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const Xe=Ye({abs_:function(t){const e=Ze(t,"x","abs");if("complex64"===e.dtype){const t={x:e};return je.runKernel("ComplexAbs",t)}{const t={x:e};return je.runKernel("Abs",t)}}});const Je=Ye({acos_:function(t){const e={x:Ze(t,"x","acos")};return je.runKernel("Acos",e)}});const tn=Ye({acosh_:function(t){const e={x:Ze(t,"x","acosh")};return je.runKernel("Acosh",e)}});const en=Ye({add_:function(t,e){let n=Ze(t,"a","add"),r=Ze(e,"b","add");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Add",s)}});const nn=Ye({addN_:function(t){lt(Array.isArray(t),(()=>"The argument passed to tf.addN() must be a list of tensors")),lt(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>Ze(t,`tensors${e}`,"addN"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((t=>{if(!ft(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=e;return je.runKernel("AddN",r)}});const rn=Ye({all_:function(t,e=null,n=!1){const r={x:Ze(t,"x","all","bool")},s={axis:e,keepDims:n};return je.runKernel("All",r,s)}});const sn=Ye({any_:function(t,e=null,n=!1){const r={x:Ze(t,"x","any","bool")},s={axis:e,keepDims:n};return je.runKernel("Any",r,s)}});const an=Ye({argMax_:function(t,e=0){const n={x:Ze(t,"x","argMax")},r={axis:e};return je.runKernel("ArgMax",n,r)}});const on=Ye({argMin_:function(t,e=0){const n={x:Ze(t,"x","argMin")},r={axis:e};return je.runKernel("ArgMin",n,r)}});const un=Ye({asin_:function(t){const e={x:Ze(t,"x","asin")};return je.runKernel("Asin",e)}});const pn=Ye({asinh_:function(t){const e={x:Ze(t,"x","asinh")};return je.runKernel("Asinh",e)}});const ln=Ye({atan_:function(t){const e={x:Ze(t,"x","atan")};return je.runKernel("Atan",e)}});const cn=Ye({atan2_:function(t,e){let n=Ze(t,"a","atan2"),r=Ze(e,"b","atan2");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Atan2",s)}});const hn=Ye({atanh_:function(t){const e={x:Ze(t,"x","atanh")};return je.runKernel("Atanh",e)}});const dn=Ye({cast_:function(t,e){const n=Ze(t,"x","cast");if(!function(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:e};return je.runKernel("Cast",r,s)}});function mn(t,e,n,r,s,a,o=!1,i="channelsLast"){let[u,p,l,c]=[-1,-1,-1,-1];if("channelsLast"===i)[u,p,l,c]=t;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,c,p,l]=t}const[h,d,,m]=e,[f,y]=fn(n),[g,b]=fn(r),x=yn(h,g),N=yn(d,b),{padInfo:k,outHeight:w,outWidth:T}=function(t,e,n,r,s,a,o,i,u){let p,l,c;if("number"==typeof t){p={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};const s=function(t,e,n,r,s){null==r&&(r=function(t,e,n,r=1){const s=yn(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}(t,e,n));const a=t[0],o=t[1],i=gn((a-e+2*r)/n+1,s),u=gn((o-e+2*r)/n+1,s);return[i,u]}([e,n],a,r,t,i);l=s[0],c=s[1]}else if("same"===t){l=Math.ceil(e/r),c=Math.ceil(n/s);const t=Math.max(0,(l-1)*r+a-e),i=Math.max(0,(c-1)*s+o-n),u=Math.floor(t/2),h=t-u,d=Math.floor(i/2);p={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===t)p={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((e-a+1)/r),c=Math.ceil((n-o+1)/s);else{if("object"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const h="channelsLast"===u?t[1][0]:t[2][0],d="channelsLast"===u?t[1][1]:t[2][1],m="channelsLast"===u?t[2][0]:t[3][0],f="channelsLast"===u?t[2][1]:t[3][1];p={top:h,bottom:d,left:m,right:f,type:0===h&&0===d&&0===m&&0===f?"VALID":"EXPLICIT"},l=gn((e-a+h+d)/r+1,i),c=gn((n-o+m+f)/s+1,i)}}return{padInfo:p,outHeight:l,outWidth:c}}(s,p,l,f,y,x,N,a,i),_=o?m*c:m;let v;return"channelsFirst"===i?v=[u,_,w,T]:"channelsLast"===i&&(v=[u,w,T,_]),{batchSize:u,dataFormat:i,inHeight:p,inWidth:l,inChannels:c,outHeight:w,outWidth:T,outChannels:_,padInfo:k,strideHeight:f,strideWidth:y,filterHeight:h,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:N,dilationHeight:g,dilationWidth:b,inShape:t,outShape:v,filterShape:e}}function fn(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function yn(t,e){return e<=1?t:t+(t-1)*(e-1)}function gn(t,e){if(!e)return Math.trunc(t);switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function bn(t){const[e,n,r]=fn(t);return 1===e&&1===n&&1===r}function xn(t,e){return bn(t)||bn(e)}function Nn(t,e,n){if(null!=n){if("string"==typeof e)throw Error(`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`);if("number"==typeof e)lt(yt(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`));else{if("object"!=typeof e)throw Error(`Error in ${t}: Unknown padding parameter: ${e}`);e.forEach((e=>{e.forEach((e=>{lt(yt(e),(()=>`Error in ${t}: pad must be an integer when using dimRoundingMode ${n} but got pad ${e}.`))}))}))}}}const kn=Ye({reshape_:function(t,e){const n={x:Ze(t,"x","reshape","string_or_numeric")},r={shape:e};return je.runKernel("Reshape",n,r)}});const wn=Ye({avgPool_:function(t,e,n,r,s){const a=Ze(t,"x","avgPool","float32");lt(xn(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=kn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),lt(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),Nn("avgPool",r,s);const u={x:o},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let l=je.runKernel("AvgPool",u,p);return l=dn(l,a.dtype),i?kn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Tn=Ye({avgPool3d_:function(t,e,n,r,s,a="NDHWC"){const o=Ze(t,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=kn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),lt(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),lt("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Nn("avgPool3d",r,s);const p={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let c=je.runKernel("AvgPool3D",p,l);return c=dn(c,i.dtype),u?kn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const _n=Ye({clone_:function(t){const e={x:Ze(t,"x","clone","string_or_numeric")};return je.runKernel("Identity",e)}});const vn=Ye({concat_:function(t,e=0){lt(t.length>=1,(()=>"Pass at least one tensor to concat"));const n=Qe(t,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((t=>{if("complex64"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${t.dtype}. `)})),1===n.length)return _n(n[0]);const r=n,s={axis:e};return je.runKernel("Concat",r,s)}});const Sn=Ye({matMul_:function(t,e,n=!1,r=!1){let s=Ze(t,"a","matMul"),a=Ze(e,"b","matMul");[s,a]=ze(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return je.runKernel("BatchMatMul",o,i)}});const En=Ye({mul_:function(t,e){let n=Ze(t,"a","mul"),r=Ze(e,"b","mul");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Multiply",s)}});const $n=Ye({sigmoid_:function(t){const e={x:Ze(t,"x","sigmoid","float32")};return je.runKernel("Sigmoid",e)}});const In=Ye({slice_:function(t,e,n){const r=Ze(t,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:e,size:n};return je.runKernel("Slice",s,a)}});const Dn=Ye({tanh_:function(t){const e={x:Ze(t,"x","tanh","float32")};return je.runKernel("Tanh",e)}});Ye({basicLSTMCell_:function(t,e,n,r,s,a){const o=Ze(t,"forgetBias","basicLSTMCell"),i=Ze(e,"lstmKernel","basicLSTMCell"),u=Ze(n,"lstmBias","basicLSTMCell"),p=Ze(r,"data","basicLSTMCell"),l=Ze(s,"c","basicLSTMCell"),c=Ze(a,"h","basicLSTMCell"),h=vn([p,c],1),d=Sn(h,i),m=en(d,u),f=m.shape[0],y=m.shape[1]/4,g=[f,y],b=In(m,[0,0],g),x=In(m,[0,y],g),N=In(m,[0,2*y],g),k=In(m,[0,3*y],g),w=en(En($n(b),Dn(x)),En(l,$n(en(o,N))));return[w,En(Dn(w),$n(k))]}});const An=Ye({batchToSpaceND_:function(t,e,n){const r=Ze(t,"x","batchToSpaceND"),s=e.reduce(((t,e)=>t*e));lt(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),lt(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),lt(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${s}`));const a={x:r},o={blockShape:e,crops:n};return je.runKernel("BatchToSpaceND",a,o)}});const On=Ye({batchNorm_:function(t,e,n,r,s,a){null==a&&(a=.001);const o=Ze(t,"x","batchNorm"),i=Ze(e,"mean","batchNorm"),u=Ze(n,"variance","batchNorm");let p,l;null!=s&&(p=Ze(s,"scale","batchNorm")),null!=r&&(l=Ze(r,"offset","batchNorm")),lt(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),lt(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),lt(null==p||i.rank===p.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const c={x:function(t){let e;return e=0===t.rank||1===t.rank?kn(t,[1,1,1,t.size]):2===t.rank?kn(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?kn(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(o),scale:p,offset:l,mean:i,variance:u},h={varianceEpsilon:a},d=je.runKernel("FusedBatchNorm",c,h);return kn(d,o.shape)}});Ye({batchNorm2d_:function(t,e,n,r,s,a){const o=Ze(t,"x","batchNorm"),i=Ze(e,"mean","batchNorm"),u=Ze(n,"variance","batchNorm");let p,l;return null!=s&&(p=Ze(s,"scale","batchNorm")),null!=r&&(l=Ze(r,"offset","batchNorm")),lt(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),lt(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),lt(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=p&&lt(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${p.rank}.`)),null!=l&&lt(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`)),On(o,i,u,l,p,a)}}),Ye({batchNorm3d_:function(t,e,n,r,s,a){const o=Ze(t,"x","batchNorm"),i=Ze(e,"mean","batchNorm"),u=Ze(n,"variance","batchNorm");let p,l;return null!=s&&(p=Ze(s,"scale","batchNorm")),null!=r&&(l=Ze(r,"offset","batchNorm")),lt(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),lt(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),lt(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=p&&lt(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${p.rank}.`)),null!=l&&lt(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`)),On(o,i,u,l,p,a)}}),Ye({batchNorm4d_:function(t,e,n,r,s,a){const o=Ze(t,"x","batchNorm"),i=Ze(e,"mean","batchNorm"),u=Ze(n,"variance","batchNorm");let p,l;return null!=s&&(p=Ze(s,"scale","batchNorm")),null!=r&&(l=Ze(r,"offset","batchNorm")),lt(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),lt(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),lt(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=p&&lt(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${p.rank}.`)),null!=l&&lt(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`)),On(o,i,u,l,p,a)}});const Mn=Ye({bincount_:function(t,e,n){const r=Ze(t,"x","bincount"),s=Ze(e,"weights","bincount");lt("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),lt(n>=0,(()=>`size must be non-negative, but got ${n}.`)),lt(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return je.runKernel("Bincount",a,o)}});const Fn=Ye({broadcastArgs_:function(t,e){const n=Ze(t,"s0","broadcastArgs","int32"),r=Ze(e,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return je.runKernel("BroadcastArgs",s)}});const Cn=Ye({broadcastTo_:function(t,e){let n=Ze(t,"broadcastTo","x");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=kn(n,t)}const s=n.shape,a=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])a[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===a.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return _n(n);const o={x:n},i={reps:a};return je.runKernel("Tile",o,i)}});function Vn(t,e="float32",n){return e=e||"float32",It(t),new $e(t,e,n)}const Rn=Ye({ceil_:function(t){const e={x:Ze(t,"x","ceil","float32")};return je.runKernel("Ceil",e)}});const zn=Ye({clipByValue_:function(t,e,n){const r=Ze(t,"x","clipByValue");lt(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},a={clipValueMin:e,clipValueMax:n};return je.runKernel("ClipByValue",s,a)}});const Ln=Ye({complex_:function(t,e){const n=Ze(t,"real","complex"),r=Ze(e,"imag","complex");ct(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return je.runKernel("Complex",s)}});Ye({concat1d_:function(t){return vn(t,0)}}),Ye({concat2d_:function(t,e){return vn(t,e)}}),Ye({concat3d_:function(t,e){return vn(t,e)}}),Ye({concat4d_:function(t,e){return vn(t,e)}});const Bn=Ye({conv2d_:function(t,e,n,r,s="NHWC",a=[1,1],o){const i=Ze(t,"x","conv2d","float32"),u=Ze(e,"filter","conv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=kn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),lt(4===p.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${p.rank}.`)),lt(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),Nn("conv2d",r,o);const c="NHWC"===s?p.shape[3]:p.shape[1];lt(c===u.shape[2],(()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`)),lt(xn(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const h={x:p,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=je.runKernel("Conv2D",h,d);return l?kn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Pn=Ye({conv1d_:function(t,e,n,r,s="NWC",a=1,o){const i=Ze(t,"x","conv1d"),u=Ze(e,"filter","conv1d");let p=i,l=!1;2===i.rank&&(l=!0,p=kn(i,[1,i.shape[0],i.shape[1]])),lt(3===p.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${p.rank}.`)),lt(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),Nn("conv1d",r,o),lt(p.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${p.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),lt(xn(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),lt("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const c=kn(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=kn(p,[p.shape[0],1,p.shape[1],p.shape[2]]),d=Bn(h,c,[1,n],r,"NHWC",[1,a],o);return kn(d,l?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Kn=Ye({conv2DBackpropInput_:function(t,e,n,r,s,a="NHWC",o){lt(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let i=t,u=e,p=!1;3===e.rank&&(p=!0,u=kn(e,[1,e.shape[0],e.shape[1],e.shape[2]]),i=[1,t[0],t[1],t[2]]),lt(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),lt(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),lt(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const l="NHWC"===a?i[3]:i[1],c="NHWC"===a?u.shape[3]:u.shape[1];lt(l===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`)),lt(c===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[3]}.`)),Nn("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},m=je.runKernel("Conv2DBackpropInput",h,d);return p?kn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const qn=Ye({conv2dTranspose_:function(t,e,n,r,s,a){const o=Ze(t,"x","conv2dTranspose"),i=Ze(e,"filter","conv2dTranspose");return Kn(n,o,i,r,s,"NHWC",a)}});const jn=Ye({conv3d_:function(t,e,n,r,s="NDHWC",a=[1,1,1]){const o=Ze(t,"x","conv3d"),i=Ze(e,"filter","conv3d");let u=o,p=!1;4===o.rank&&(p=!0,u=kn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),lt(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),lt(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),lt(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),lt(xn(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),lt("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const l={x:u,filter:i},c={strides:n,pad:r,dataFormat:s,dilations:a},h=je.runKernel("Conv3D",l,c);return p?kn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Un=Ye({conv3DBackpropInput_:function(t,e,n,r,s){lt(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let a=t,o=e,i=!1;4===e.rank&&(i=!0,o=kn(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);const u=a[4],p=o.shape[4];lt(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),lt(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),lt(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),lt(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),lt(p===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[4]}.`));const l={dy:o,filter:n},c={pad:s,strides:r,inputShape:a},h=je.runKernel("Conv3DBackpropInputV2",l,c);return i?kn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});Ye({conv3dTranspose_:function(t,e,n,r,s){const a=Ze(t,"x","conv3dTranspose"),o=Ze(e,"filter","conv3dTranspose");return Un(n,a,o,r,s)}});const Wn=Ye({cos_:function(t){const e={x:Ze(t,"x","cos","float32")};return je.runKernel("Cos",e)}});const Hn=Ye({cosh_:function(t){const e={x:Ze(t,"x","cosh","float32")};return je.runKernel("Cosh",e)}});const Gn=Ye({cumprod_:function(t,e=0,n=!1,r=!1){const s={x:Ze(t,"x","cumprod")},a={axis:e,exclusive:n,reverse:r};return je.runKernel("Cumprod",s,a)}});const Zn=Ye({cumsum_:function(t,e=0,n=!1,r=!1){const s={x:Ze(t,"x","cumsum")},a={axis:e,exclusive:n,reverse:r};return je.runKernel("Cumsum",s,a)}});const Qn=Ye({denseBincount_:function(t,e,n,r=!1){const s=Ze(t,"x","denseBincount"),a=Ze(e,"weights","denseBincount");lt("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),lt(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),lt(n>=0,(()=>`size must be non-negative, but got ${n}.`)),lt(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return je.runKernel("DenseBincount",o,i)}});const Yn=Ye({depthToSpace_:function(t,e,n="NHWC"){const r=Ze(t,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];lt(e>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${e}`)),lt(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${e}  for depthToSpace with input shape\n    ${r.shape}`)),lt(a*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${e} for depthToSpace with input shape\n        ${r.shape}`)),lt(o%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:e,dataFormat:n};return je.runKernel("DepthToSpace",i,u)}});const Xn=Ye({depthwiseConv2d_:function(t,e,n,r,s="NHWC",a=[1,1],o){const i=Ze(t,"x","depthwiseConv2d","float32"),u=Ze(e,"filter","depthwiseConv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=kn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),lt(4===p.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),lt(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`)),lt(p.shape[3]===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Nn("depthwiseConv2d",r,o);const c={x:p,filter:u},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},d=je.runKernel("DepthwiseConv2dNative",c,h);return l?kn(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});Ye({diag_:function(t){const e={x:Ze(t,"x","diag")};return je.runKernel("Diag",e)}});const Jn=Ye({dilation2d_:function(t,e,n,r,s=[1,1],a="NHWC"){const o=Ze(t,"x","dilation2d"),i=Ze(e,"filter","dilation2d");lt(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),lt(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),lt("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,p=!1;3===o.rank&&(u=kn(o,[1,o.shape[0],o.shape[1],o.shape[2]]),p=!0);const l={x:u,filter:i},c={strides:n,pad:r,dilations:s},h=je.runKernel("Dilation2D",l,c);return p?kn(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const tr=Ye({floorDiv_:function(t,e){let n=Ze(t,"a","floorDiv"),r=Ze(e,"b","floorDiv");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("FloorDiv",s)}});const er=Ye({div_:function(t,e){let n=Ze(t,"a","div"),r=Ze(e,"b","div");if([n,r]=ze(n,r),"int32"===n.dtype&&"int32"===r.dtype)return tr(n,r);const s={a:n,b:r};return je.runKernel("RealDiv",s,{})}});function nr(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let a=e[e.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`)}n.unshift(r)}}return n}const rr=Ye({equal_:function(t,e){let n=Ze(t,"a","equal","string_or_numeric"),r=Ze(e,"b","equal","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("Equal",s)}});const sr=Ye({where_:function(t,e,n){const r=Ze(e,"a","where"),s=Ze(n,"b","where"),a=Ze(t,"condition","where","bool"),o=nr(nr(a.shape,r.shape),s.shape),i={condition:Cn(a,o),t:Cn(r,o),e:Cn(s,o)};return je.runKernel("Select",i)}});const ar=Ye({zerosLike_:function(t){const e={x:Ze(t,"x","zerosLike")};return je.runKernel("ZerosLike",e)}});const or=Ye({divNoNan_:function(t,e){let n=Ze(t,"a","div"),r=Ze(e,"b","div");[n,r]=ze(n,r);const s=er(n,r),a=ar(s),o=rr(r,a);return sr(o,a,s)}});Ye({dot_:function(t,e){const n=Ze(t,"t1","dot"),r=Ze(e,"t2","dot");lt(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(lt(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const t=kn(n,[1,-1]),e=kn(r,[-1,1]),s=Sn(t,e);return kn(s,[])}if(1===n.rank&&2===r.rank){const t=kn(n,[1,-1]),e=kn(r,[r.shape[0],r.shape[1]]),s=Sn(t,e);return kn(s,[s.size])}if(2===n.rank&&1===r.rank){const t=kn(r,[-1,1]),e=Sn(n,t);return kn(e,[e.size])}{const t=kn(r,[r.shape[0],r.shape[1]]);return Sn(n,t)}}});const ir=Ye({einsum_:function(t,...e){const n=e.map(((t,e)=>Ze(t,`tensors${e}`,"einsum"))),r={equation:t};return je.runKernel("Einsum",n,r)}});const ur=Ye({elu_:function(t){const e={x:Ze(t,"x","elu","float32")};return je.runKernel("Elu",e)}});const pr=Ye({erf_:function(t){let e=Ze(t,"x","erf");lt("int32"===e.dtype||"float32"===e.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===e.dtype&&(e=dn(e,"float32"));const n={x:e};return je.runKernel("Erf",n)}});const lr=Ye({exp_:function(t){const e={x:Ze(t,"x","exp")};return je.runKernel("Exp",e)}});const cr=Ye({expandDims_:function(t,e=0){const n=Ze(t,"x","expandDims","string_or_numeric");lt(e<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:e};return je.runKernel("ExpandDims",r,s)}});const hr=Ye({expm1_:function(t){const e={x:Ze(t,"x","expm1")};return je.runKernel("Expm1",e)}});const dr=Ye({tile_:function(t,e){const n=Ze(t,"x","tile","string_or_numeric");lt(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r={x:n},s={reps:e};return je.runKernel("Tile",r,s)}});const mr=Ye({eye_:function(t,e,n,r="float32"){null==e&&(e=t);const s=Vn([t,e],r),a=t<=e?t:e;for(let t=0;t<a;++t)s.set(1,t,t);const o=kn(s.toTensor(),[t,e]);if(null==n)return o;if(1===n.length)return dr(cr(o,0),[n[0],1,1]);if(2===n.length)return dr(cr(cr(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return dr(cr(cr(cr(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function fr(t,e,n){const r={shape:t,value:e,dtype:n};return je.runKernel("Fill",{},r)}const yr=Ye({floor_:function(t){const e={x:Ze(t,"x","floor","float32")};return je.runKernel("Floor",e)}});const gr=Ye({gather_:function(t,e,n=0,r=0){const s={x:Ze(t,"x","gather"),indices:Ze(e,"indices","gather","int32")},a={axis:n,batchDims:r};return je.runKernel("GatherV2",s,a)}});const br=Ye({greater_:function(t,e){let n=Ze(t,"a","greater","string_or_numeric"),r=Ze(e,"b","greater","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("Greater",s)}});const xr=Ye({greaterEqual_:function(t,e){let n=Ze(t,"a","greaterEqual","string_or_numeric"),r=Ze(e,"b","greaterEqual","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("GreaterEqual",s)}});const Nr=Ye({imag_:function(t){const e={input:Ze(t,"input","imag")};return je.runKernel("Imag",e)}});Ye({isFinite_:function(t){const e={x:Ze(t,"x","isFinite")};return je.runKernel("IsFinite",e)}}),Ye({isInf_:function(t){const e={x:Ze(t,"x","isInf")};return je.runKernel("IsInf",e)}});const kr=Ye({isNaN_:function(t){const e={x:Ze(t,"x","isNaN")};return je.runKernel("IsNan",e)}});const wr=Ye({leakyRelu_:function(t,e=.2){const n={x:Ze(t,"x","leakyRelu")},r={alpha:e};return je.runKernel("LeakyRelu",n,r)}});const Tr=Ye({less_:function(t,e){let n=Ze(t,"a","less","string_or_numeric"),r=Ze(e,"b","less","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("Less",s)}});const _r=Ye({lessEqual_:function(t,e){let n=Ze(t,"a","lessEqual","string_or_numeric"),r=Ze(e,"b","lessEqual","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("LessEqual",s)}});function vr(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:t,stop:e,num:n};return je.runKernel("LinSpace",{},r)}const Sr=Ye({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const a=Ze(t,"x","localResponseNormalization");lt(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),lt(yt(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=kn(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},p={depthRadius:e,bias:n,alpha:r,beta:s},l=je.runKernel("LRN",u,p);return i?kn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Er=Ye({log_:function(t){const e={x:Ze(t,"x","log","float32")};return je.runKernel("Log",e)}});const $r=Ye({log1p_:function(t){const e={x:Ze(t,"x","log1p")};return je.runKernel("Log1p",e)}});function Ir(t){return je.customGrad(t)}const Dr=Ye({neg_:function(t){const e={x:Ze(t,"x","neg")};return je.runKernel("Neg",e)}});const Ar=Ye({softplus_:function(t){const e={x:Ze(t,"x","softplus")};return je.runKernel("Softplus",e)}});Ye({logSigmoid_:function(t){const e=Ze(t,"x","logSigmoid");return Ir((t=>({value:Dr(Ar(Dr(t))),gradFunc:e=>En(e,$n(Dr(t)))})))(e)}});const Or=Ye({max_:function(t,e=null,n=!1){const r={x:Ze(t,"x","max")},s={reductionIndices:e,keepDims:n};return je.runKernel("Max",r,s)}});const Mr=Ye({sub_:function(t,e){let n=Ze(t,"a","sub"),r=Ze(e,"b","sub");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Sub",s)}});const Fr=Ye({sum_:function(t,e=null,n=!1){let r=Ze(t,"x","sum");"bool"===r.dtype&&(r=dn(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return je.runKernel("Sum",s,a)}});const Cr=Ye({logSoftmax_:function(t,e=-1){const n=Ze(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return Ir(((t,n)=>{const r=Or(t,e,!0),s=Mr(t,r),a=Mr(dn(s,"float32"),Er(Fr(lr(s),e,!0)));n([a]);return{value:a,gradFunc:(t,n)=>{const[r]=n,s=lr(r);return Mr(t,En(Fr(t,e,!0),s))}}}))(n)}});function Vr(t,e){return function(t,e,n){const r=t.length+e.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(t[a++]):s.push(e[o++]);return s}(t,e.map((t=>1)),e)}const Rr=Ye({logSumExp_:function(t,e=null,n=!1){const r=Ze(t,"x","logSumExp"),s=bt(e,r.shape),a=Or(r,s,!0),o=Mr(r,a),i=lr(o),u=Fr(i,s),p=Er(u),l=en(kn(a,p.shape),p);if(n){const t=Vr(l.shape,s);return kn(l,t)}return l}});const zr=Ye({logicalAnd_:function(t,e){const n=Ze(t,"a","logicalAnd","bool"),r=Ze(e,"b","logicalAnd","bool");nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("LogicalAnd",s)}});const Lr=Ye({logicalNot_:function(t){const e={x:Ze(t,"x","logicalNot","bool")};return je.runKernel("LogicalNot",e)}});const Br=Ye({logicalOr_:function(t,e){const n=Ze(t,"a","logicalOr","bool"),r=Ze(e,"b","logicalOr","bool");nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("LogicalOr",s)}});Ye({logicalXor_:function(t,e){const n=Ze(t,"a","logicalXor","bool"),r=Ze(e,"b","logicalXor","bool");return nr(n.shape,r.shape),zr(Br(t,e),Lr(zr(t,e)))}});const Pr=Ye({maxPool_:function(t,e,n,r,s){const a=Ze(t,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=kn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),lt(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),lt(xn(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Nn("maxPool",r,s);const u={x:o},p={filterSize:e,strides:n,pad:r,dimRoundingMode:s},l=je.runKernel("MaxPool",u,p);return i?kn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const Kr=Ye({maxPool3d_:function(t,e=[1,1,1],n,r,s,a="NDHWC"){const o=Ze(t,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=kn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),lt(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),lt("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Nn("maxPool3d",r,s);const p={x:i},l={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},c=je.runKernel("MaxPool3D",p,l);return u?kn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const qr=Ye({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const a={x:Ze(t,"x","maxPoolWithArgmax")},o={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},i=je.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const jr=Ye({maximum_:function(t,e){let n=Ze(t,"a","maximum"),r=Ze(e,"b","maximum");[n,r]=ze(n,r),"bool"===n.dtype&&(n=dn(n,"int32"),r=dn(r,"int32")),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("Maximum",s)}});const Ur=Ye({mean_:function(t,e=null,n=!1){const r={x:Ze(t,"x","mean")},s={axis:e,keepDims:n};return je.runKernel("Mean",r,s)}});function Wr(t,e="float32"){if("complex64"===e){const e=Wr(t,"float32"),n=Wr(t,"float32");return Ln(e,n)}const n=$t(mt(t),e);return je.makeTensor(n,t,e)}function Hr(t,e="float32"){if("complex64"===e){const e=Hr(t,"float32"),n=Wr(t,"float32");return Ln(e,n)}const n=Et(mt(t),e);return je.makeTensor(n,t,e)}const Gr=Ye({min_:function(t,e=null,n=!1){const r={x:Ze(t,"x","min")},s={axis:e,keepDims:n};return je.runKernel("Min",r,s)}});const Zr=Ye({minimum_:function(t,e){let n=Ze(t,"a","minimum"),r=Ze(e,"b","minimum");[n,r]=ze(n,r),"bool"===n.dtype&&(n=dn(n,"int32"),r=dn(r,"int32")),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("Minimum",s)}});const Qr=Ye({mirrorPad_:function(t,e,n){lt("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=Ze(t,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");lt(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s="reflect"===n?1:0;for(let t=0;t<r.rank;t++)lt(2===e[t].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),lt(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:e,mode:n},o={x:r};return je.runKernel("MirrorPad",o,a)}});const Yr=Ye({mod_:function(t,e){let n=Ze(t,"a","mod"),r=Ze(e,"b","mod");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Mod",s)}});const Xr=Ye({square_:function(t){const e=Ze(t,"x","square");return je.runKernel("Square",{x:e},{})}});Ye({moments_:function(t,e=null,n=!1){const r=bt(e,(t=Ze(t,"x","moments")).shape),s=Ur(t,r,n);let a=s.shape;n||(a=Vr(s.shape,r));const o=Xr(Mr(dn(t,"float32"),kn(s,a)));return{mean:s,variance:Ur(o,r,n)}}}),Ye({multiRNNCell_:function(t,e,n,r){const s=Ze(e,"data","multiRNNCell"),a=Qe(n,"c","multiRNNCell"),o=Qe(r,"h","multiRNNCell");let i=s;const u=[];for(let e=0;e<t.length;e++){const n=t[e](i,a[e],o[e]);u.push(n[0]),u.push(n[1]),i=n[1]}const p=[],l=[];for(let t=0;t<u.length;t+=2)p.push(u[t]),l.push(u[t+1]);return[p,l]}});const Jr=Ye({multinomial_:function(t,e,n,r=!1){const s=Ze(t,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?kn(s,[1,-1]):s},u={numSamples:e,seed:n,normalized:r},p=je.runKernel("Multinomial",i,u);return 1===o?kn(p,[p.size]):p}});const ts=Ye({notEqual_:function(t,e){let n=Ze(t,"a","notEqual","string_or_numeric"),r=Ze(e,"b","notEqual","string_or_numeric");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("NotEqual",s)}});const es=Ye({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s={indices:Ze(t,"indices","oneHot","int32")},a={depth:e,onValue:n,offValue:r};return je.runKernel("OneHot",s,a)}});const ns=Ye({onesLike_:function(t){const e={x:Ze(t,"x","onesLike")};return je.runKernel("OnesLike",e)}});Ye({outerProduct_:function(t,e){const n=Ze(t,"v1","outerProduct"),r=Ze(e,"v2","outerProduct");lt(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=kn(n,[-1,1]),a=kn(r,[1,-1]);return Sn(s,a)}});const rs=Ye({pad_:function(t,e,n=0){const r=Ze(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:e,constantValue:n},a={x:r};return je.runKernel("PadV2",a,s)}});Ye({pad1d_:function(t,e,n=0){return lt(2===e.length,(()=>"Invalid number of paddings. Must be length of 2.")),rs(t,[e],n)}}),Ye({pad2d_:function(t,e,n=0){return lt(2===e.length&&2===e[0].length&&2===e[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rs(t,e,n)}}),Ye({pad3d_:function(t,e,n=0){return lt(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rs(t,e,n)}}),Ye({pad4d_:function(t,e,n=0){return lt(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),rs(t,e,n)}});const ss=Ye({spaceToBatchND_:function(t,e,n){const r=Ze(t,"x","spaceToBatchND");lt(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),lt(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),lt(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},a={blockShape:e,paddings:n};return je.runKernel("SpaceToBatchND",s,a)}});Ye({pool_:function(t,e,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=Ze(t,"x","maxPool");let u=i,p=!1;3===i.rank&&(p=!0,u=kn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),lt(xn(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const l=function(t,e,n,r,s,a,o="channelsLast"){const[i,u]=fn(e);let p;if("channelsLast"===o)p=[i,u,t[3],t[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);p=[i,u,t[1],t[1]]}return mn(t,p,n,r,s,a,!1,o)}(u.shape,e,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[m,f]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),a=t.concat(r,s),o=e.map(((t,e)=>(t-a[e]%t)%t)),i=s.map(((t,e)=>t+o[e])),u=e.map(((t,e)=>[r[e],i[e]])),p=e.map(((t,e)=>[0,o[e]]));return[u,p]}([l.inHeight,l.inWidth],c,h),y=d?r:"valid",g=d?u:ss(u,c,m),b=("avg"===n?()=>wn(g,e,a,y,o):()=>Pr(g,e,a,y,o))(),x=d?b:An(b,c,f);return p?kn(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const as=Ye({pow_:function(t,e){let n=Ze(t,"base","pow"),r=Ze(e,"exp","pow");[n,r]=ze(n,r);const s={a:n,b:r};return je.runKernel("Pow",s)}});const os=Ye({prelu_:function(t,e){const n={x:Ze(t,"x","prelu"),alpha:Ze(e,"alpha","prelu")};return je.runKernel("Prelu",n)}});const is=Ye({prod_:function(t,e=null,n=!1){let r=Ze(t,"x","prod");"bool"===r.dtype&&(r=dn(r,"int32"));const s={x:r},a={axis:e,keepDims:n};return je.runKernel("Prod",s,a)}});Ye({rand_:function(t,e,n){const r=mt(t);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return je.makeTensor(s,t,n)}});var us="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function ps(t){if(t.__esModule)return t;var e=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(t).forEach((function(n){var r=Object.getOwnPropertyDescriptor(t,n);Object.defineProperty(e,n,r.get?r:{enumerable:!0,get:function(){return t[n]}})})),e}function ls(t){var e={exports:{}};return t(e,e.exports),e.exports}var cs=ls((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function s(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function a(t,e){var n=new r(t),a=e&&e.state,o=n.next;return o.int32=function(){return 4294967296*n.next()|0},o.double=function(){return o()+11102230246251565e-32*(2097152*o()|0)},o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,t,!1)})),hs=ls((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,t,!1)})),ds=ls((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function s(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,t,!1)})),ms=ls((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n&&(r[7]=-1),t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function s(t,e){return e.x=t.x.slice(),e.i=t.i,e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.x&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,t,!1)})),fs=ls((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,a=e.i;return e.w=r=r+1640531527|0,n=s[a+34&127],t=s[a=a+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[a]=n^t,e.i=a,n+(r^r>>>16)|0},function(t,e){var n,r,s,a,o,i=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),s=0,a=-32;a<u;++a)e&&(r^=e.charCodeAt((a+32)%e.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(e&&e.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;t.w=o,t.X=i,t.i=s}(e,t)}function s(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function a(t,e){null==t&&(t=+new Date);var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&(a.X&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,t,!1)})),ys=ls((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function s(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function a(t,e){var n=new r(t),a=e&&e.state,o=function(){return(n.next()>>>0)/4294967296};return o.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},o.int32=n.next,o.quick=o,a&&("object"==typeof a&&s(a,n),o.state=function(){return s(n,{})}),o}e&&e.exports?e.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,t,!1)})),gs=ps({__proto__:null,default:{}}),bs=ls((function(t){!function(e,n,r){var s,a=256,o=r.pow(a,6),i=r.pow(2,52),u=2*i,p=255;function l(t,p,l){var y=[],g=m(d((p=1==p?{entropy:!0}:p||{}).entropy?[t,f(n)]:null==t?function(){try{var t;return s&&(t=s.randomBytes)?t=t(a):(t=new Uint8Array(a),(e.crypto||e.msCrypto).getRandomValues(t)),f(t)}catch(t){var r=e.navigator,o=r&&r.plugins;return[+new Date,e,o,e.screen,f(n)]}}():t,3),y),b=new c(y),x=function(){for(var t=b.g(6),e=o,n=0;t<i;)t=(t+n)*a,e*=a,n=b.g(1);for(;t>=u;)t/=2,e/=2,n>>>=1;return(t+n)/e};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,m(f(b.S),n),(p.pass||l||function(t,e,n,s){return s&&(s.S&&h(s,b),t.state=function(){return h(b,{})}),n?(r.random=t,e):t})(x,g,"global"in p?p.global:this==r,p.state)}function c(t){var e,n=t.length,r=this,s=0,o=r.i=r.j=0,i=r.S=[];for(n||(t=[n++]);s<a;)i[s]=s++;for(s=0;s<a;s++)i[s]=i[o=p&o+t[s%n]+(e=i[s])],i[o]=e;(r.g=function(t){for(var e,n=0,s=r.i,o=r.j,i=r.S;t--;)e=i[s=p&s+1],n=n*a+i[p&(i[s]=i[o=p&o+e])+(i[o]=e)];return r.i=s,r.j=o,n})(a)}function h(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function d(t,e){var n,r=[],s=typeof t;if(e&&"object"==s)for(n in t)try{r.push(d(t[n],e-1))}catch(t){}return r.length?r:"string"==s?t:t+"\0"}function m(t,e){for(var n,r=t+"",s=0;s<r.length;)e[p&s]=p&(n^=19*e[p&s])+r.charCodeAt(s++);return f(e)}function f(t){return String.fromCharCode.apply(0,t)}if(m(r.random(),n),t.exports){t.exports=l;try{s=gs}catch(t){}}else r.seedrandom=l}("undefined"!=typeof self?self:us,[],Math)}));bs.alea=cs,bs.xor128=hs,bs.xorwow=ds,bs.xorshift7=ms,bs.xor4096=fs,bs.tychei=ys;var xs=bs;class Ns{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=xs.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*o,e=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class ks{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=xs.alea(s.toString()),this.randn=new Ns(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-a+Math.log(a)),s=this.randu(),s<e||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class ws{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=xs.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}Ye({randomGamma_:function(t,e,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new ks(e,n,r,s),o=Vn(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}}),Ye({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Ns(e,n,r,!1,s),o=Vn(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}});const Ts=Ye({randomUniform_:function(t,e=0,n=1,r="float32",s){const a=Vn(t,r),o=new ws(e,n,null,s);for(let t=0;t<a.values.length;t++)a.values[t]=o.nextValue();return a.toTensor()}});function _s(t,e,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:t,stop:e,step:n,dtype:r};return je.runKernel("Range",{},s)}const vs=Ye({real_:function(t){const e={input:Ze(t,"input","real")};return je.runKernel("Real",e)}});const Ss=Ye({reciprocal_:function(t){const e={x:Ze(t,"x","reciprocal")};return je.runKernel("Reciprocal",e)}});const Es=Ye({relu_:function(t){const e={x:Ze(t,"x","relu")};return je.runKernel("Relu",e)}});const $s=Ye({relu6_:function(t){const e={x:Ze(t,"x","relu6")};return je.runKernel("Relu6",e)}});const Is=Ye({reverse_:function(t,e){const n={x:Ze(t,"x","reverse")},r={dims:e};return je.runKernel("Reverse",n,r)}});Ye({reverse1d_:function(t){const e=Ze(t,"x","reverse");return lt(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),Is(e,0)}}),Ye({reverse2d_:function(t,e){const n=Ze(t,"x","reverse");return lt(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Is(n,e)}}),Ye({reverse3d_:function(t,e){const n=Ze(t,"x","reverse");return lt(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Is(n,e)}}),Ye({reverse4d_:function(t,e){const n=Ze(t,"x","reverse");return lt(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Is(n,e)}});const Ds=Ye({round_:function(t){const e={x:Ze(t,"x","round")};return je.runKernel("Round",e)}});const As=Ye({rsqrt_:function(t){const e={x:Ze(t,"x","rsqrt","float32")};return je.runKernel("Rsqrt",e)}});function Os(t,e,n,r){if(null==r&&(r=wt(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!xt(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){It(e);const t=mt(e),r=mt(n);lt(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==mt(e.slice(t));lt(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return xt(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?ge(t,r):dt(t,[],!0),je.makeTensor(t,e,r)}function Ms(t,e){if((xt(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&xt(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Os(t,[],[],e)}const Fs=Ye({selu_:function(t){const e={x:Ze(t,"x","selu")};return je.runKernel("Selu",e)}});Ye({separableConv2d_:function(t,e,n,r,s,a=[1,1],o="NHWC"){const i=Ze(t,"x","separableConv2d"),u=Ze(e,"depthwiseFilter","separableConv2d"),p=Ze(n,"pointwiseFilter","separableConv2d");let l=i,c=!1;if(3===i.rank&&(c=!0,l=kn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");lt(4===l.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`)),lt(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),lt(4===p.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),lt(1===p.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${p.shape[0]}.`)),lt(1===p.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${p.shape[1]}.`));const h=u.shape[2],d=u.shape[3];lt(p.shape[2]===h*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${p.shape[2]}.`));const m=Xn(l,u,r,s,o,a),f=Bn(m,p,1,"valid",o);return c?kn(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Cs=async function(t,e){const n=Ze(t,"x","setdiff1d"),r=Ze(e,"y","setdiff1d");lt(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),lt(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),lt(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let t=0;t<s.length;t++)o.has(s[t])||i++;const u=new $e([i],n.dtype),p=new $e([i],"int32");for(let t=0,e=0;t<s.length;t++)o.has(s[t])||(u.values[e]=s[t],p.values[e]=t,e++);return[u.toTensor(),p.toTensor()]};const Vs=Ye({sign_:function(t){const e={x:Ze(t,"x","sign")};return je.runKernel("Sign",e)}});const Rs=Ye({sin_:function(t){const e={x:Ze(t,"x","sin","float32")};return je.runKernel("Sin",e)}});const zs=Ye({sinh_:function(t){const e={x:Ze(t,"x","sinh")};return je.runKernel("Sinh",e)}});Ye({slice1d_:function(t,e,n){const r=Ze(t,"x","slice1d");return lt(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),In(r,[e],[n])}}),Ye({slice2d_:function(t,e,n){const r=Ze(t,"x","slice2d");return lt(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),In(r,e,n)}}),Ye({slice3d_:function(t,e,n){const r=Ze(t,"x","slice3d");return lt(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),In(r,e,n)}}),Ye({slice4d_:function(t,e,n){const r=Ze(t,"x","slice4d");return lt(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),In(r,e,n)}});const Ls=Ye({softmax_:function(t,e=-1){const n=Ze(t,"logits","softmax","float32");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return je.runKernel("Softmax",r,s)}});const Bs=Ye({fft_:function(t){lt("complex64"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return je.runKernel("FFT",e)}});const Ps=Ye({ifft_:function(t){lt("complex64"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return je.runKernel("IFFT",e)}});const Ks=Ye({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=kn(t,[n,e]);r=Ps(s)}else{const s=[n,2*(e-1)],a=kn(vs(t),[n,e]),o=kn(Nr(t),[n,e]),i=Is(In(a,[0,1],[n,e-2]),1),u=En(Is(In(o,[0,1],[n,e-2]),1),Ms(-1)),p=vn([a,i],1),l=vn([o,u],1),c=kn(Ln(p,l),[s[0],s[1]]);r=Ps(c)}if(r=vs(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=kn(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}});const qs=Ye({split_:function(t,e,n=0){const r={x:Ze(t,"x","split")},s={numOrSizeSplits:e,axis:n};return je.runKernel("SplitV",r,s)}});const js=Ye({rfft_:function(t,e){lt("float32"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),a=t.shape.map((t=>t));a[t.shape.length-1]=e,s=In(t,r,a),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=vn([t,Wr(r)],t.shape.length-1),n=e}else s=t;const a=ar(s),o=kn(Ln(s,a),[r,n]),i=Bs(o),u=Math.floor(n/2)+1,p=vs(i),l=Nr(i),c=qs(p,[u,n-u],p.shape.length-1),h=qs(l,[u,n-u],l.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,kn(Ln(c[0],h[0]),d)}});const Us=Ye({sqrt_:function(t){const e={x:Ze(t,"x","sqrt","float32")};return je.runKernel("Sqrt",e)}});const Ws=Ye({squaredDifference_:function(t,e){let n=Ze(t,"a","squaredDifference"),r=Ze(e,"b","squaredDifference");[n,r]=ze(n,r),nr(n.shape,r.shape);const s={a:n,b:r};return je.runKernel("SquaredDifference",s,{})}});const Hs=Ye({squeeze_:function(t,e){const n=Ze(t,"x","squeeze");return kn(n,function(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,a=null==e||s?null:bt(e,t).sort();let o=0;for(let e=0;e<t.length;++e){if(null!=a){if(a[o]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==a[o]||a[o]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),a[o]<=e&&o++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}(n.shape,e).newShape)}});const Gs=Ye({stack_:function(t,e=0){const n=Qe(t,"tensors","stack","string_or_numeric");lt(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&lt(e<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:e};return je.runKernel("Pack",r,s)}});const Zs=Ye({step_:function(t,e=0){const n={x:Ze(t,"x","step")},r={alpha:e};return je.runKernel("Step",n,r)}});const Qs=Ye({stridedSlice_:function(t,e,n,r,s=0,a=0,o=0,i=0,u=0){const p={x:Ze(t,"x","stridedSlice","string_or_numeric")},l={begin:e,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return je.runKernel("StridedSlice",p,l)}});const Ys=Ye({tan_:function(t){const e={x:Ze(t,"x","tan","float32")};return je.runKernel("Tan",e)}});function Xs(t,e){ht(t);const n=We(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Os(t,null,n,e)}function Js(t,e,n){if(ht(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const r=We(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Os(t,e,r,n)}const ta=Ye({topk_:function(t,e=1,n=!0){const r=Ze(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const a={x:r},o={k:e,sorted:n},[i,u]=je.runKernel("TopK",a,o);return{values:i,indices:u}}});const ea=Ye({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Ns(e,n,r,!0,s),o=Vn(t,r);for(let t=0;t<o.values.length;t++)o.values[t]=a.nextValue();return o.toTensor()}});const na=Ye({unique_:function(t,e=0){const n=Ze(t,"x","unique","string_or_numeric");lt(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:e},[a,o]=je.runKernel("Unique",r,s);return{values:a,indices:o}}});Ye({unsortedSegmentSum_:function(t,e,n){const r=Ze(t,"x","unsortedSegmentSum"),s=Ze(e,"segmentIds","unsortedSegmentSum","int32");lt(yt(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return je.runKernel("UnsortedSegmentSum",a,o)}});const ra=Ye({unstack_:function(t,e=0){const n=Ze(t,"x","unstack","string_or_numeric");lt(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:e};return je.runKernel("Unpack",r,s)}});const sa=async function(t){const e=Ze(t,"condition","whereAsync","bool"),n=await e.data(),r=function(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=Vn(t,"int32"),s=Vn([n.length,t.length],"int32");for(let e=0;e<n.length;e++){const a=r.indexToLoc(n[e]),o=e*t.length;s.values.set(a,o)}return s.toTensor()}(e.shape,n);return t!==e&&e.dispose(),r};const aa=Ye({transpose_:function(t,e){const n=Ze(t,"x","transpose");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),lt(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{lt(t>=0&&t<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${e}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return je.runKernel("Transpose",r,s)}});function oa(t,e,n=null){if(0===t.rank)return Xe(t);if(1!==t.rank&&null===n)return oa(kn(t,[-1]),e,n);if(1===t.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return Fr(Xe(t),n);if(e===1/0)return Or(Xe(t),n);if(e===-1/0)return Gr(Xe(t),n);if("euclidean"===e||2===e)return Us(Fr(as(Xe(t),Ms(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return Or(Fr(Xe(t),n[0]),n[1]-1);if(e===1/0)return Or(Fr(Xe(t),n[1]),n[0]);if(e===-1/0)return Gr(Fr(Xe(t),n[1]),n[0]);if("fro"===e||"euclidean"===e)return Us(Fr(Xr(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ia=Ye({norm_:function(t,e="euclidean",n=null,r=!1){const s=oa(t=Ze(t,"x","norm"),e,n);let a=s.shape;if(r){const e=bt(n,t.shape);a=Vr(s.shape,e)}return kn(s,a)}});function ua(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if("int32"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}!function(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(a+" update.rank != "+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(a+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(a+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}(n,e,t)}Ye({movingAverage_:function(t,e,n,r,s=!0){const a=Ze(t,"v","movingAverage"),o=Ze(e,"x","movingAverage"),i=Ze(n,"decay","movingAverage");var u,p;p=o,lt((u=a).dtype===p.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${p.dtype}) input must match`)),lt(ft(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=Ms(1),c=Mr(l,i);let h=En(Mr(o,a),c);if(s){lt(null!=r,(()=>"When using zeroDebias: true, step is required."));const t=Ze(r,"step","movingAverage");h=er(h,Mr(l,as(i,t)))}return en(a,h)}});const pa=Ye({scatterND_:function(t,e,n){const r=Ze(t,"indices","scatterND","int32"),s=Ze(e,"updates","scatterND");ua(s,r,n);const a={indices:r,updates:s},o={shape:n};return je.runKernel("ScatterNd",a,o)}});const la=Ye({sparseToDense_:function(t,e,n,r=0){const s=Ze(t,"sparseIndices","sparseToDense","int32"),a=Ze(e,"sparseValues","sparseToDense"),o=Ze(r,"defaultValue","sparseToDense",a.dtype);!function(t,e,n,r){if("int32"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=e.size;if(0!==e.rank&&(1!==e.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return je.runKernel("SparseToDense",i,u)}});const ca=Ye({gatherND_:function(t,e){const n=Ze(e,"indices","gatherND","int32"),r={params:Ze(t,"x","gatherND","string_or_numeric"),indices:n};return je.runKernel("GatherNd",r)}});function ha(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let a=0;a<t;++a){const o=2*Math.PI*a/(t+r-1);s[a]=e-n*Math.cos(o)}return Xs(s,"float32")}Ye({dropout_:function(t,e,n,r){const s=Ze(t,"x","dropout");if(lt("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),lt(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof De?s.clone():s;const a=function(t,e){if(null==e)return t.shape.slice();if(ft(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),o=1-e,i=er(yr(en(Ts(a,0,1,"float32",r),o)),o);return En(s,i)}});const da=Ye({conv2DBackpropFilter_:function(t,e,n,r,s,a="NHWC",o){let i=t;3===t.rank&&(i=kn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=kn(e,[1,e.shape[0],e.shape[1],e.shape[2]])),lt(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),lt(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),lt(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const p="NHWC"===a?i.shape[3]:i.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];lt(p===n[2],(()=>`Error in conv2dDerFilter: depth of input ${p}) must match input depth in filter (${n[2]}.`)),lt(l===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`)),Nn("conv2dDerFilter",s,o);const c={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return je.runKernel("Conv2DBackpropFilter",c,h)}});function ma(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return En(t,Zs(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function fa(t,e){let n=e;const r=function(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],a=e.length-r-1,o=e[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(t.shape,e.shape);return r.length>0&&(n=Fr(n,r)),kn(n,t.shape)}function ya(t,e,n,r){if("linear"===e)return t;if("relu"===e)return Es(t);if("elu"===e)return ur(t);if("relu6"===e)return $s(t);if("prelu"===e)return os(t,n);if("leakyrelu"===e)return wr(t,r);if("sigmoid"===e)return $n(t);throw new Error(`Unknown fused activation ${e}.`)}const ga=(t,e)=>!(t>0)||"linear"===e;const ba=Ye({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(u=u||"linear",!1===ga(je.state.gradientDepth,u)){let c=Bn(t,e,n,r,s,a,o);return null!=i&&(c=en(c,i)),ya(c,u,p,l)}const c=Ze(t,"x","conv2d","float32"),h=Ze(e,"filter","conv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=kn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),lt(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),lt(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),Nn("fused conv2d",r,o),lt(d.shape[3]===h.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${h.shape[2]}.`)),lt(xn(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),lt("NHWC"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const f=mn(d.shape,h.shape,n,a,r,o);let y,g;null!=i&&(y=Ze(i,"bias","fused conv2d"),[y]=ze(y,c),nr(f.outShape,y.shape)),null!=p&&(g=Ze(p,"prelu weights","fused conv2d"));const b=(t,e)=>{const[s,o,i,p]=e,l=ma(t,i,u);lt(bn(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const c=[Kn(o.shape,l,s,n,r),da(o,l,s.shape,n,r)];if(null!=p){const t=fa(p,l);c.push(t)}return c},x={x:d,filter:h,bias:y,preluActivationWeights:g},N={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){return Ir(((t,e,n)=>{let r=je.runKernel("FusedConv2D",x,N);return n([e,t,r]),m&&(r=kn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return Ir(((t,e,n,r)=>{let s=je.runKernel("FusedConv2D",x,N);return r([e,t,s,n]),m&&(s=kn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,h,y)}});const xa=Ye({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,a=[1,1],o){let i=t;3===t.rank&&(i=kn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u=e;3===u.rank&&(u=kn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const p={x:i,dy:u},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return je.runKernel("DepthwiseConv2dNativeBackpropFilter",p,l)}});const Na=Ye({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,a=[1,1],o){let i=e,u=!1;3===e.rank&&(u=!0,i=kn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const p={dy:i,filter:n},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:t},c=je.runKernel("DepthwiseConv2dNativeBackpropInput",p,l);return u?kn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const ka=Ye({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(!1===ga(je.state.gradientDepth,u)){let c=Xn(t,e,n,r,s,a,o);return null!=i&&(c=en(c,i)),ya(c,u,p,l)}const c=Ze(t,"x","depthwiseConv2d","float32"),h=Ze(e,"filter","depthwiseConv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=kn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),lt(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),lt(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),lt(d.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==a&&(a=[1,1]),lt(xn(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Nn("fused depthwiseConv2d",r,o);const f=mn(d.shape,h.shape,n,a,r,o,!0);let y,g;null!=i&&(y=Ze(i,"bias","fused conv2d"),[y]=ze(y,c),nr(f.outShape,y.shape)),null!=p&&(g=Ze(p,"prelu weights","fused depthwiseConv2d"));const b=(t,e)=>{lt(bn(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[s,i,p,l]=e,c=ma(t,p,u),h=Na(i.shape,c,s,n,r,a,o),d=xa(i,c,s.shape,n,r,a,o);if(null!=l){return[h,d,fa(y,c)]}return[h,d]},x={x:d,filter:h,bias:y,preluActivationWeights:g},N={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){return Ir(((t,e,n)=>{let r=je.runKernel("FusedDepthwiseConv2D",x,N);return n([e,t,r]),m&&(r=kn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,h)}return Ir(((t,e,n,r)=>{let s=je.runKernel("FusedDepthwiseConv2D",x,N);return r([e,t,s,n]),m&&(s=kn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,h,y)}});const wa=Ye({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i}){if(!1===ga(je.state.gradientDepth,a)){let u=Sn(t,e,n,r);return null!=s&&(u=en(u,s)),ya(u,a,o,i)}let u=Ze(t,"a","fused matMul"),p=Ze(e,"b","fused matMul");[u,p]=ze(u,p);const l=n?u.shape[u.rank-2]:u.shape[u.rank-1],c=r?p.shape[p.rank-1]:p.shape[p.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?p.shape[p.rank-2]:p.shape[p.rank-1],m=u.shape.slice(0,-2),f=p.shape.slice(0,-2),y=mt(m),g=mt(f);lt(l===c,(()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${u.shape} and ${p.shape} and transposeA=${n} and transposeB=${r} must match.`));const b=nr(u.shape.slice(0,-2),p.shape.slice(0,-2)).concat([h,d]),x=kn(u,n?[y,l,h]:[y,h,l]),N=kn(p,r?[g,d,c]:[g,c,d]);let k,w;null!=s&&(k=Ze(s,"bias","fused matMul"),[k]=ze(k,u),nr(b,k.shape)),null!=o&&(w=Ze(o,"prelu weights","fused matMul"));const T=(t,e)=>{const[o,i,u,p]=e,l=ma(kn(t,u.shape),u,a);let c,h;if(n||r?!n&&r?(c=Sn(l,i,!1,!1),h=Sn(l,o,!0,!1)):n&&!r?(c=Sn(i,l,!1,!0),h=Sn(o,l,!1,!1)):(c=Sn(i,l,!0,!0),h=Sn(l,o,!0,!0)):(c=Sn(l,i,!1,!0),h=Sn(o,l,!0,!1)),null!=s){return[c,h,fa(p,l)]}return[c,h]},_={a:x,b:N,bias:k,preluActivationWeights:w},v={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){return Ir(((t,e,n)=>{const r=je.runKernel("_FusedMatMul",_,v);return n([t,e,r]),{value:kn(r,b),gradFunc:T}}))(x,N)}return Ir(((t,e,n,r)=>{const s=je.runKernel("_FusedMatMul",_,v);return r([t,e,s,n]),{value:kn(s,b),gradFunc:T}}))(x,N,k)}});Ye({hammingWindow_:function(t){return ha(t,.54,.46)}});const Ta=Ye({hannWindow_:function(t){return ha(t,.5,.5)}});const _a=Ye({frame_:function(t,e,n,r=!1,s=0){let a=0;const o=[];for(;a+e<=t.size;)o.push(In(t,a,e)),a+=n;if(r)for(;a<t.size;){const r=a+e-t.size,i=vn([In(t,a,e-r),fr([r],s)]);o.push(i),a+=n}return 0===o.length?Js([],[0,e]):kn(vn(o),[o.length,e])}});Ye({stft_:function(t,e,n,r,s=Ta){var a;null==r&&(a=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(a)/Math.log(2)))));const o=_a(t,e,n),i=En(o,s(e));return js(i,r)}});const va=Ye({cropAndResize_:function(t,e,n,r,s="bilinear",a=0){const o=Ze(t,"image","cropAndResize"),i=Ze(e,"boxes","cropAndResize","float32"),u=Ze(n,"boxInd","cropAndResize","int32"),p=i.shape[0];lt(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),lt(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${p},4] but had shape ${i.shape}.`)),lt(1===u.rank&&u.shape[0]===p,(()=>`Error in cropAndResize: boxInd must be have size [${p}] but had shape ${i.shape}.`)),lt(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),lt(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),lt("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const l={image:o,boxes:i,boxInd:u},c={method:s,extrapolationValue:a,cropSize:r};return je.runKernel("CropAndResize",l,c)}});const Sa=Ye({flipLeftRight_:function(t){const e=Ze(t,"image","flipLeftRight","float32");lt(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return je.runKernel("FlipLeftRight",n,{})}});const Ea=Ye({grayscaleToRGB_:function(t){const e=Ze(t,"image","grayscaleToRGB"),n=e.rank-1,r=e.shape[n];lt(e.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`)),lt(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(e.rank);return s.fill(1,0,n),s[n]=3,dr(e,s)}});const $a=Ye({rotateWithOffset_:function(t,e,n=0,r=.5){const s=Ze(t,"image","rotateWithOffset","float32");lt(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:e,fillValue:n,center:r};return je.runKernel("RotateWithOffset",a,o)}});function Ia(t,e,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=t.shape[0];return n=Math.min(n,o),lt(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),lt(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),lt(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),lt(1===e.rank,(()=>"scores must be a 1D tensor")),lt(e.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${e.shape[0]}`)),lt(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Da=Ye({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ze(t,"boxes","nonMaxSuppression","float32"),o=Ze(e,"scores","nonMaxSuppression","float32"),i=Ia(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return je.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function Aa(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(e,t[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(t,e,n||Oa)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Oa(t,e){return t>e?1:t<e?-1:0}function Ma(t,e,n,r,s,a,o=!1,i=!1,u=!1){const p=[];for(let t=0;t<e.length;t++)e[t]>s&&p.push({score:e[t],boxIndex:t,suppressBeginIndex:0});p.sort(Va);const l=a>0?-.5/a:0,c=[],h=[];for(;c.length<n&&p.length>0;){const e=p.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=e;if(n<s)break;let i=!1;for(let n=c.length-1;n>=o;--n){const o=Fa(t,a,c[n]);if(o>=r){i=!0;break}if(e.score=e.score*Ca(r,l,o),e.score<=s)break}e.suppressBeginIndex=c.length,i||(e.score===n?(c.push(a),h.push(e.score)):e.score>s&&Aa(p,e,Va))}const d=c.length,m=n-d;i&&m>0&&(c.push(...new Array(m).fill(0)),h.push(...new Array(m).fill(0)));const f={selectedIndices:c};return o&&(f.selectedScores=h),u&&(f.validOutputs=d),f}function Fa(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),p=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),m=(c-p)*(h-l);if(d<=0||m<=0)return 0;const f=Math.max(a,p),y=Math.max(o,l),g=Math.min(i,c),b=Math.min(u,h),x=Math.max(g-f,0)*Math.max(b-y,0);return x/(d+m-x)}function Ca(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Va(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Ra=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=Ze(t,"boxes","nonMaxSuppressionAsync"),o=Ze(e,"scores","nonMaxSuppressionAsync"),i=Ia(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),p=u[0],l=u[1],{selectedIndices:c}=function(t,e,n,r,s){return Ma(t,e,n,r,s,0)}(p,l,n,r,s);return a!==t&&a.dispose(),o!==e&&o.dispose(),Xs(c,"int32")};const za=Ye({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ze(t,"boxes","nonMaxSuppression"),i=Ze(e,"scores","nonMaxSuppression"),u=Ia(o,i,n,r,s,a),p={boxes:o,scores:i},l={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},c=je.runKernel("NonMaxSuppressionV5",p,l);return{selectedIndices:c[0],selectedScores:c[1]}}});const La=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=Ze(t,"boxes","nonMaxSuppressionAsync"),i=Ze(e,"scores","nonMaxSuppressionAsync"),u=Ia(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const p=await Promise.all([o.data(),i.data()]),l=p[0],c=p[1],{selectedIndices:h,selectedScores:d}=function(t,e,n,r,s,a){return Ma(t,e,n,r,s,a,!0)}(l,c,n,r,s,a);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:Xs(h,"int32"),selectedScores:Xs(d)}};const Ba=Ye({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ze(t,"boxes","nonMaxSuppression"),i=Ze(e,"scores","nonMaxSuppression"),u=Ia(o,i,n,r,s,null),p={boxes:o,scores:i},l={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},c=je.runKernel("NonMaxSuppressionV4",p,l);return{selectedIndices:c[0],validOutputs:c[1]}}});const Pa=async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=Ze(t,"boxes","nonMaxSuppressionAsync"),i=Ze(e,"scores","nonMaxSuppressionAsync"),u=Ia(o,i,n,r,s,null),p=u.maxOutputSize,l=u.iouThreshold,c=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:f}=function(t,e,n,r,s,a){return Ma(t,e,n,r,s,0,!1,a,!0)}(h,d,p,l,c,a);return o!==t&&o.dispose(),i!==e&&i.dispose(),{selectedIndices:Xs(m,"int32"),validOutputs:Ms(f,"int32")}};const Ka=Ye({resizeBilinear_:function(t,e,n=!1,r=!1){const s=Ze(t,"images","resizeBilinear");lt(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),lt(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`)),lt(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=kn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const i={images:a},u={alignCorners:n,halfPixelCenters:r,size:e},p=je.runKernel("ResizeBilinear",i,u);return o?kn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const qa=Ye({resizeNearestNeighbor_:function(t,e,n=!1,r=!1){const s=Ze(t,"images","resizeNearestNeighbor");lt(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),lt(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),lt("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),lt(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=kn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const i={images:a},u={alignCorners:n,halfPixelCenters:r,size:e},p=je.runKernel("ResizeNearestNeighbor",i,u);return o?kn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ja=Ye({threshold_:function(t,e="binary",n=!1,r=.5){const s=Ze(t,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,p,l=En(Xs([r]),255);if(lt(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),lt(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),lt("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),lt("otsu"===e||"binary"===e,(()=>`Method must be binary or otsu, but was ${e}`)),3===s.shape[2]){[o,i,u]=qs(s,[1,1,1],-1);const t=En(o,.2989),e=En(i,.587),n=En(u,.114);p=en(en(t,e),n)}else p=t;if("otsu"===e){l=function(t,e){let n,r,s,a,o,i,u=Xs([-1]),p=Xs([0]),l=Xs([0]);for(let c=0;c<t.size-1;c++){n=In(t,0,c+1),r=In(t,c+1),o=er(Fr(n),e),i=er(Fr(r),e);const h=Fr(En(n,_s(0,n.size)));s=er(h,Fr(n));const d=fr(r.shape,n.size),m=en(_s(0,r.size),d),f=En(r,m);a=er(Fr(f),Fr(r));const y=Mr(s,a),g=Mr(s,a),b=En(o,i);l=En(En(b,y),g);const x=br(l,p);p=sr(x,l,p),u=sr(x,Xs([c]),u)}return u}(Mn(dn(Ds(p),"int32"),Os(c=[],h,We(c,d),d),256),a)}var c,h,d;const m=n?_r(p,l):br(p,l);return dn(En(m,255),"int32")}});const Ua=Ye({transform_:function(t,e,n="nearest",r="constant",s=0,a){const o=Ze(t,"image","transform","float32"),i=Ze(e,"transforms","transform","float32");lt(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),lt(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),lt(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},p={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return je.runKernel("Transform",u,p)}});function Wa(t,e=!1){return je.tidy((()=>{lt(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=mr(n),a=_n(t);const o=Js([[1]],[1,1]);let i=_n(o);const u=n>=r?r:n;for(let t=0;t<u;++t){const e=a,u=i,p=s;[i,a,s]=je.tidy((()=>{const e=In(a,[t,t],[n-t,1]),u=ia(e),p=In(a,[t,t],[1,1]),l=sr(br(p,0),Js([[-1]]),Js([[1]])),c=Mr(p,En(l,u)),h=er(e,c);i=1===h.shape[0]?_n(o):vn([o,In(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=Dr(er(Sn(l,c),u)),m=In(a,[t,0],[n-t,r]),f=En(d,i),y=aa(i);if(0===t)a=Mr(m,Sn(f,Sn(y,m)));else{const e=Mr(m,Sn(f,Sn(y,m)));a=vn([In(a,[0,0],[t,r]),e],0)}const g=aa(f),b=In(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=Mr(b,Sn(Sn(b,i),g));else{const e=Mr(b,Sn(Sn(b,i),g));s=vn([In(s,[0,0],[n,t]),e],1)}return[i,a,s]})),Le([e,u,p]).forEach((t=>t.dispose()))}return!e&&n>r&&(s=In(s,[0,0],[n,r]),a=In(a,[0,0],[r,r])),[s,a]}))}var Ha;Ye({bandPart_:function(t,e,n){lt(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),lt(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=Ze(t,"a","bandPart");lt(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(e<=a))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);e<0&&(e=a),n<0&&(n=o);const i=kn(_s(0,a,1,"int32"),[-1,1]),u=_s(0,o,1,"int32"),p=Mr(i,u),l=zr(_r(p,Ms(+e,"int32")),xr(p,Ms(-n,"int32"))),c=Wr([a,o],r.dtype);return kn(Gs(ra(kn(r,[-1,a,o])).map((t=>sr(l,t,c)))),s)}}),Ye({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,lt(null!=t&&t.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)lt(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=qs(t,t.shape[0],0).map((t=>Hs(t,[0])));lt(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(je.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=En(Fr(En(n[r],t)),n[r]);t=Mr(t,e)}return er(t,ia(t,"euclidean"))})));return e?Gs(n,0):n}}),Ye({qr_:function(t,e=!1){if(lt(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return Wa(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=ra(kn(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],a=[];r.forEach((t=>{const[n,r]=Wa(t,e);s.push(n),a.push(r)}));return[kn(Gs(s,0),t.shape),kn(Gs(a,0),t.shape)]}}}),function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Ha||(Ha={}));const Ga=Ye({computeWeightedLoss_:function(t,e,n=Ha.SUM_BY_NONZERO_WEIGHTS){const r=Ze(t,"losses","computeWeightedLoss");let s=null;null!=e&&(s=Ze(e,"weights","computeWeightedLoss"));const a=null==s?r:En(r,s);if(n===Ha.NONE)return a;if(n===Ha.SUM)return Fr(a);if(n===Ha.MEAN){if(null==s)return Ur(a);{const t=r.size/s.size,e=er(Fr(a),Fr(s));return t>1?er(e,Ms(t)):e}}if(n===Ha.SUM_BY_NONZERO_WEIGHTS){if(null==s)return er(Fr(a),Ms(r.size));{const t=En(s,Hr(r.shape)),e=dn(Fr(ts(t,Ms(0))),"float32");return er(Fr(a),e)}}throw Error(`Unknown reduction: ${n}`)}});Ye({absoluteDifference_:function(t,e,n,r=Ha.SUM_BY_NONZERO_WEIGHTS){const s=Ze(t,"labels","absoluteDifference"),a=Ze(e,"predictions","absoluteDifference");let o=null;null!=n&&(o=Ze(n,"weights","absoluteDifference")),ct(s.shape,a.shape,"Error in absoluteDifference: ");const i=Xe(Mr(s,a));return Ga(i,o,r)}}),Ye({cosineDistance_:function(t,e,n,r,s=Ha.SUM_BY_NONZERO_WEIGHTS){const a=Ze(t,"labels","cosineDistance"),o=Ze(e,"predictions","cosineDistance");let i=null;null!=r&&(i=Ze(r,"weights","cosineDistance")),ct(a.shape,o.shape,"Error in cosineDistance: ");const u=Ms(1),p=Mr(u,Fr(En(a,o),n,!0));return Ga(p,i,s)}}),Ye({hingeLoss_:function(t,e,n,r=Ha.SUM_BY_NONZERO_WEIGHTS){let s=Ze(t,"labels","hingeLoss");const a=Ze(e,"predictions","hingeLoss");let o=null;null!=n&&(o=Ze(n,"weights","hingeLoss")),ct(s.shape,a.shape,"Error in hingeLoss: ");const i=Ms(1);s=Mr(En(Ms(2),s),i);const u=Es(Mr(i,En(s,a)));return Ga(u,o,r)}}),Ye({huberLoss_:function(t,e,n,r=1,s=Ha.SUM_BY_NONZERO_WEIGHTS){const a=Ze(t,"labels","huberLoss"),o=Ze(e,"predictions","huberLoss");let i=null;null!=n&&(i=Ze(n,"weights","huberLoss")),ct(a.shape,o.shape,"Error in huberLoss: ");const u=Ms(r),p=Xe(Mr(o,a)),l=Zr(p,u),c=Mr(p,l),h=en(En(Ms(.5),Xr(l)),En(u,c));return Ga(h,i,s)}}),Ye({logLoss_:function(t,e,n,r=1e-7,s=Ha.SUM_BY_NONZERO_WEIGHTS){const a=Ze(t,"labels","logLoss"),o=Ze(e,"predictions","logLoss");let i=null;null!=n&&(i=Ze(n,"weights","logLoss")),ct(a.shape,o.shape,"Error in logLoss: ");const u=Ms(1),p=Ms(r),l=Dr(En(a,Er(en(o,p)))),c=En(Mr(u,a),Er(en(Mr(u,o),p))),h=Mr(l,c);return Ga(h,i,s)}}),Ye({meanSquaredError_:function(t,e,n,r=Ha.SUM_BY_NONZERO_WEIGHTS){const s=Ze(t,"labels","meanSquaredError"),a=Ze(e,"predictions","meanSquaredError");let o=null;null!=n&&(o=Ze(n,"weights","meanSquaredError")),ct(s.shape,a.shape,"Error in meanSquaredError: ");const i=Ws(s,a);return Ga(i,o,r)}}),Ye({sigmoidCrossEntropy_:function(t,e,n,r=0,s=Ha.SUM_BY_NONZERO_WEIGHTS){let a=Ze(t,"multiClassLabels","sigmoidCrossEntropy");const o=Ze(e,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=Ze(n,"weights","sigmoidCrossEntropy")),ct(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const t=Ms(r),e=Ms(1),n=Ms(.5);a=en(En(a,Mr(e,t)),En(n,t))}const u=function(t,e){const n=Ze(t,"labels","sigmoidCrossEntropyWithLogits"),r=Ze(e,"logits","sigmoidCrossEntropyWithLogits");ct(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Es(r),a=En(r,n),o=$r(lr(Dr(Xe(r))));return en(Mr(s,a),o)}(a,o);return Ga(u,i,s)}}),Ye({softmaxCrossEntropy_:function(t,e,n,r=0,s=Ha.SUM_BY_NONZERO_WEIGHTS){let a=Ze(t,"onehotLabels","softmaxCrossEntropy");const o=Ze(e,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=Ze(n,"weights","softmaxCrossEntropy")),ct(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const t=Ms(r),e=Ms(1),n=Ms(a.shape[1]);a=en(En(a,Mr(e,t)),er(t,n))}const u=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return Ir(((t,e,r)=>{const s=Rr(e,[n],!0),a=Mr(dn(e,"float32"),s);r([t,a]);const o=Dr(En(a,t));return{value:Fr(o,[n]),gradFunc:(t,e)=>{const[r,s]=e,a=Vr(t.shape,[n]);return[En(kn(t,a),Mr(dn(r,"float32"),lr(s))),En(kn(t,a),Mr(lr(s),dn(r,"float32")))]}}}))(t,e)}(a,o);return Ga(u,i,s)}});const Za=Ye({sparseFillEmptyRows_:function(t,e,n,r){const s=Ze(t,"indices","sparseFillEmptyRows","int32"),a=Ze(e,"values","sparseFillEmptyRows"),o=Ze(n,"denseShape","sparseFillEmptyRows","int32"),i=Ze(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},p=je.runKernel("SparseFillEmptyRows",u);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}});const Qa=Ye({sparseReshape_:function(t,e,n){const r=Ze(t,"inputIndices","sparseReshape","int32"),s=Ze(e,"inputShape","sparseReshape","int32"),a=Ze(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=je.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Ya=Ye({sparseSegmentMean_:function(t,e,n){const r=Ze(t,"data","sparseSegmentMean"),s=Ze(e,"indices","sparseSegmentMean","int32"),a=Ze(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return je.runKernel("SparseSegmentMean",o)}});const Xa=Ye({sparseSegmentSum_:function(t,e,n){const r=Ze(t,"data","sparseSegmentSum"),s=Ze(e,"indices","sparseSegmentSum","int32"),a=Ze(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return je.runKernel("SparseSegmentSum",o)}});const Ja=Ye({stringNGrams_:function(t,e,n,r,s,a,o,i){const u=Ze(t,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const p=Ze(e,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const l={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},c={data:u,dataSplits:p},h=je.runKernel("StringNGrams",c,l);return{nGrams:h[0],nGramsSplits:h[1]}}});const to=Ye({stringSplit_:function(t,e,n=!0){const r=Ze(t,"input","stringSplit","string"),s=Ze(e,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=je.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const eo=Ye({stringToHashBucketFast_:function(t,e){const n=Ze(t,"input","stringToHashBucketFast","string"),r={numBuckets:e};if(e<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return je.runKernel("StringToHashBucketFast",s,r)}}),no={flipLeftRight:Sa,grayscaleToRGB:Ea,resizeNearestNeighbor:qa,resizeBilinear:Ka,rotateWithOffset:$a,cropAndResize:va,nonMaxSuppression:Da,nonMaxSuppressionAsync:Ra,nonMaxSuppressionWithScore:za,nonMaxSuppressionWithScoreAsync:La,nonMaxSuppressionPadded:Ba,nonMaxSuppressionPaddedAsync:Pa,threshold:ja,transform:Ua},ro={sparseFillEmptyRows:Za,sparseReshape:Qa,sparseSegmentMean:Ya,sparseSegmentSum:Xa},so={stringNGrams:Ja,stringSplit:to,stringToHashBucketFast:eo};function ao(t,e,r=""){if("number"!=typeof t&&"number"!=typeof e){n.assert(t.length===e.length,(()=>r+` Shapes ${t} and ${e} must match`));for(let s=0;s<t.length;s++){const a=t[s],o=e[s];n.assert(a<0||o<0||a===o,(()=>r+` Shapes ${t} and ${e} must match`))}}}function oo(t){return"number"!=typeof t&&!t.some((t=>t<0))}function io(t,e,n){let r=uo(t,n);const s=!oo(r);if(s&&0===e.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&e.forEach((t=>{r=uo(t.shape,r)})),!oo(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function uo(t,e){if("number"==typeof t)return e;if("number"==typeof e)return t;if(t.length!==e.length)throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);const n=[];for(let r=0;r<t.length;++r){const s=t[r],a=e[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);n[r]=s>=0?s:a}return n}class po{constructor(t,e,n,r,o,i,u){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=i,this.clearAfterRead=u,this.tensors=[],this.closed_=!1,this.idTensor=s(0),a(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),ao(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,a(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return o([],[0].concat(this.elementShape));const n=this.readMany(t);return ao(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),i(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return o([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return ao(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),u(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,p(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,a=[];l((()=>{e=c(e,[1,n,s]);for(let n=0;n<t.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,t[n],s];a[n]=c(h(e,o,i),this.elementShape)}return a}));const o=[];for(let e=0;e<t.length;e++)o[e]=e;this.writeMany(o,a)}}class lo{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);ao(e,t.shape,"TensorList shape mismatch: "),a(t)})),this.idTensor=s(0),this.maxNumElements=r,a(this.idTensor)}get id(){return this.idTensor.id}copy(){return new lo([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ao(t,this.elementShape,"TensorList shape mismatch: ");const r=io(this.elementShape,this.tensors,t);return l((()=>{const t=this.tensors.map((t=>c(t,r)));return i(t,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=io(this.elementShape,this.tensors,t),r=this.tensors.pop();return ao(r.shape,t,"TensorList shape mismatch: "),c(r,n)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ao(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");a(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);ao(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=io(this.elementShape,this.tensors,e);return c(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ao(this.elementShape,e.shape,"TensorList shape mismatch: "),a(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);ao(this.elementShape,n,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=io(this.elementShape,this.tensors,n);return 0===t.length?o([],[0].concat(r)):l((()=>{const e=t.map((t=>c(this.tensors[t],r)));return i(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);ao(this.elementShape,e,"TensorList shape mismatch: ");const n=io(this.elementShape,this.tensors,e);return 0===this.size()?o([],[0].concat(n)):l((()=>{const t=this.tensors.map((t=>c(t,n)));return u(t,0)}))}}const co=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=k("thenBranch",t,e,n),s=k("elseBranch",t,e,n),a=k("cond",t,e,n),o=k("args",t,e,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=k("body",t,e,n),s=k("cond",t,e,n),a=k("args",t,e,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((t=>t.id));let u=await o[0].data();o.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||t.dispose()}));let p=a;for(;u[0];){const t=p;p=await n.functionMap[r].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);const e=p.map((t=>t.id));t.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((t=>{t.kept||-1!==i.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return p}case"LoopCond":return[E(k("pred",t,e,n))];case"Switch":{const r=k("pred",t,e,n);let s=k("data",t,e,n);return s.kept||(s=E(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==w(t,e,n)));if(r){return[E(w(r,e,n))]}return}case"Enter":{const r=k("frameName",t,e,n),s=k("tensor",t,e,n);return n.enterFrame(r),[E(s)]}case"Exit":{const r=k("tensor",t,e,n);return n.exitFrame(),[E(r)]}case"NextIteration":{const r=k("tensor",t,e,n);return n.nextIteration(),[E(r)]}case"TensorArrayV3":{const r=k("size",t,e,n),a=k("dtype",t,e,n),o=k("elementShape",t,e,n),i=k("dynamicSize",t,e,n),u=k("clearAfterRead",t,e,n),p=k("identicalElementShapes",t,e,n),l=k("name",t,e,n),c=new po(l,a,r,o,p,i,u);return n.addTensorArray(c),[c.idTensor,s(1)]}case"TensorArrayWriteV3":{const r=k("tensorArrayId",t,e,n),s=k("index",t,e,n),a=k("tensor",t,e,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=k("tensorArrayId",t,e,n),s=k("index",t,e,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=k("tensorArrayId",t,e,n),s=k("indices",t,e,n),a=k("dtype",t,e,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=k("tensorArrayId",t,e,n),s=k("indices",t,e,n),a=k("tensor",t,e,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=k("tensorArrayId",t,e,n),s=n.getTensorArray(r.id),a=k("dtype",t,e,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=k("tensorArrayId",t,e,n),s=k("tensor",t,e,n),a=k("lengths",t,e,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=k("tensorArrayId",t,e,n),a=n.getTensorArray(r.id);return[s(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=k("tensorArrayId",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=k("tensorListId",t,e,n),s=k("index",t,e,n),a=k("tensor",t,e,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=k("tensorListId",t,e,n),s=k("index",t,e,n),a=k("elementShape",t,e,n),o=k("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=k("indices",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new lo([],n,t.dtype,r),o=p(t,0);return e.forEach(((t,e)=>{a.setItem(t,o[e])})),a}(k("tensor",t,e,n),r,k("elementShape",t,e,n),k("numElements",t,e,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=k("elementShape",t,e,n),s=k("elementDType",t,e,n);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const o=function(t,e,n){return new lo([],t,e,n)}(r,s,k(a,t,e,n));return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=k("tensorListId",t,e,n),s=k("indices",t,e,n),a=k("elementShape",t,e,n),o=k("elementDType",t,e,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=k("tensorListId",t,e,n),s=k("elementShape",t,e,n),a=k("elementDType",t,e,n),o=k("numElements",t,e,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);ao(t.shape.slice(1),e,"TensorList shape mismatch: ");const s=p(t);return new lo(s,e,r)}(k("tensor",t,e,n),k("elementShape",t,e,n),k("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":{const r=k("tensorListId",t,e,n),s=n.getTensorList(r.id),a=k("dtype",t,e,n),o=k("elementShape",t,e,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=k("tensorListId",t,e,n),s=k("tensor",t,e,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=k("tensorListId",t,e,n),s=k("elementShape",t,e,n),a=k("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=k("tensor",t,e,n),s=k("elementShape",t,e,n),a=function(t,e,n){let r=0;const s=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const a=uo(t.shape.slice(1),n),o=0===r?0:t.size/r,i=l((()=>{const n=[];t=c(t,[1,r,o]);for(let r=0;r<e.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,e[r],o];n[r]=c(h(t,i,u),a)}return t.dispose(),n})),u=new lo([],n,t.dtype,e.length);for(let t=0;t<i.length;t++)u.setItem(t,i[t]);return u}(r,k("lengths",t,e,n),s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function ho(t,e,n){const[r,s]=k("fusedOps",t,e,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,p=k("numArgs",t,e,n);if(a){if(i&&2!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const l=k("strides",t,e,n),c=S(t,e,n),h=k("dataFormat",t,e,n).toUpperCase(),d=k("dilations",t,e,n);let[m,f]=k("args",t,e,n);o&&(f=m,m=void 0);return{stride:l,pad:c,dataFormat:h,dilations:d,biasArg:m,preluArg:f,activationFunc:s,leakyreluAlpha:k("leakyreluAlpha",t,e,n)}}function mo(t,e,n){return{boxes:k("boxes",t,e,n),scores:k("scores",t,e,n),maxOutputSize:k("maxOutputSize",t,e,n),iouThreshold:k("iouThreshold",t,e,n),scoreThreshold:k("scoreThreshold",t,e,n),softNmsSigma:k("softNmsSigma",t,e,n)}}class fo{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=s(0),this.tensorMap=new Map,a(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ms(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);const r=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),l((()=>{const t=p(e),s=r.length,o=t.length;n.assert(s===o,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${o} elements.`));for(let e=0;e<s;e++){const n=r[e],s=t[e];a(s),this.tensorMap.set(n,s)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return l((()=>{const t=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,e);t.push(a)}return i(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function yo(e,r,s,a){const o=((e,r,s)=>{switch(e.category){case"arithmetic":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[en(k("a",t,e,n),k("b",t,e,n))];case"AddN":return[nn(k("tensors",t,e,n))];case"FloorMod":case"Mod":return[Yr(k("a",t,e,n),k("b",t,e,n))];case"Mul":return[En(k("a",t,e,n),k("b",t,e,n))];case"RealDiv":case"Div":return[er(k("a",t,e,n),k("b",t,e,n))];case"DivNoNan":return[or(k("a",t,e,n),k("b",t,e,n))];case"FloorDiv":return[tr(k("a",t,e,n),k("b",t,e,n))];case"Sub":return[Mr(k("a",t,e,n),k("b",t,e,n))];case"Minimum":return[Zr(k("a",t,e,n),k("b",t,e,n))];case"Maximum":return[jr(k("a",t,e,n),k("b",t,e,n))];case"Pow":return[as(k("a",t,e,n),k("b",t,e,n))];case"SquaredDifference":return[Ws(k("a",t,e,n),k("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"basic_math":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Abs":case"ComplexAbs":return[Xe(k("x",t,e,n))];case"Acos":return[Je(k("x",t,e,n))];case"Acosh":return[tn(k("x",t,e,n))];case"Asin":return[un(k("x",t,e,n))];case"Asinh":return[pn(k("x",t,e,n))];case"Atan":return[ln(k("x",t,e,n))];case"Atan2":return[cn(k("x",t,e,n),k("y",t,e,n))];case"Atanh":return[hn(k("x",t,e,n))];case"Ceil":return[Rn(k("x",t,e,n))];case"Complex":return[Ln(k("real",t,e,n),k("imag",t,e,n))];case"Cos":return[Wn(k("x",t,e,n))];case"Cosh":return[Hn(k("x",t,e,n))];case"Elu":return[ur(k("x",t,e,n))];case"Erf":return[pr(k("x",t,e,n))];case"Exp":return[lr(k("x",t,e,n))];case"Expm1":return[hr(k("x",t,e,n))];case"Floor":return[yr(k("x",t,e,n))];case"Log":return[Er(k("x",t,e,n))];case"Log1p":return[$r(k("x",t,e,n))];case"Imag":return[Nr(k("x",t,e,n))];case"Neg":return[Dr(k("x",t,e,n))];case"Reciprocal":return[Ss(k("x",t,e,n))];case"Real":return[vs(k("x",t,e,n))];case"Relu":return[Es(k("x",t,e,n))];case"Round":return[Ds(k("x",t,e,n))];case"Selu":return[Fs(k("x",t,e,n))];case"Sigmoid":return[$n(k("x",t,e,n))];case"Sin":return[Rs(k("x",t,e,n))];case"Sign":return[Vs(k("x",t,e,n))];case"Sinh":return[zs(k("x",t,e,n))];case"Softplus":return[Ar(k("x",t,e,n))];case"Sqrt":return[Us(k("x",t,e,n))];case"Square":return[Xr(k("x",t,e,n))];case"Tanh":return[Dn(k("x",t,e,n))];case"Tan":return[Ys(k("x",t,e,n))];case"ClipByValue":return[zn(k("x",t,e,n),k("clipValueMin",t,e,n),k("clipValueMax",t,e,n))];case"Relu6":return[$s(k("x",t,e,n))];case"Rsqrt":return[As(w(t.inputNames[0],e,n))];case"Prod":return[is(k("x",t,e,n),k("axes",t,e,n))];case"LeakyRelu":return[wr(k("x",t,e,n),k("alpha",t,e,n))];case"Prelu":return[os(k("x",t,e,n),k("alpha",t,e,n))];case"IsNan":return[kr(w(t.inputNames[0],e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"control":return co(e,r,s);case"convolution":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Conv1D":{const r=k("stride",t,e,n),s=k("pad",t,e,n),a=k("dataFormat",t,e,n).toUpperCase(),o=k("dilation",t,e,n);return[Pn(k("x",t,e,n),k("filter",t,e,n),r,s,a,o)]}case"Conv2D":{const r=k("strides",t,e,n),s=S(t,e,n),a=k("dataFormat",t,e,n).toUpperCase(),o=k("dilations",t,e,n);return[Bn(k("x",t,e,n),k("filter",t,e,n),[r[1],r[2]],s,a,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:u,activationFunc:p,leakyreluAlpha:l}=ho(t,e,n);return[ba({x:k("x",t,e,n),filter:k("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:p,preluActivationWeights:u,leakyreluAlpha:l})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:s,dataFormat:a,dilations:o,biasArg:i,preluArg:u,activationFunc:p,leakyreluAlpha:l}=ho(t,e,n);return[ka({x:k("x",t,e,n),filter:k("filter",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:a,dilations:[o[1],o[2]],bias:i,activation:p,preluActivationWeights:u,leakyreluAlpha:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=k("outputShape",t,e,n),s=k("strides",t,e,n),a=S(t,e,n);return[qn(k("x",t,e,n),k("filter",t,e,n),r,[s[1],s[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=k("strides",t,e,n),s=S(t,e,n),a=k("dilations",t,e,n),o=k("dataFormat",t,e,n).toUpperCase();return[Xn(k("input",t,e,n),k("filter",t,e,n),[r[1],r[2]],s,o,[a[1],a[2]])]}case"Conv3D":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("dataFormat",t,e,n).toUpperCase(),o=k("dilations",t,e,n);return[jn(k("x",t,e,n),k("filter",t,e,n),[r[1],r[2],r[3]],s,a,[o[1],o[2],o[3]])]}case"AvgPool":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("kernelSize",t,e,n);return[wn(k("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPool":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("kernelSize",t,e,n);return[Pr(k("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s)]}case"MaxPoolWithArgmax":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("kernelSize",t,e,n),o=k("includeBatchInIndex",t,e,n),{result:i,indexes:u}=qr(k("x",t,e,n),[a[1],a[2]],[r[1],r[2]],s,o);return[i,u]}case"AvgPool3D":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("kernelSize",t,e,n);return[Tn(k("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"MaxPool3D":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("kernelSize",t,e,n);return[Kr(k("x",t,e,n),[a[1],a[2],a[3]],[r[1],r[2],r[3]],s)]}case"Dilation2D":{const r=k("strides",t,e,n),s=k("pad",t,e,n),a=k("dilations",t,e,n),o=r[1],i=r[2],u=a[1],p=a[2];return[Jn(k("x",t,e,n),k("filter",t,e,n),[o,i],s,[u,p],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"creation":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Fill":{const r=k("shape",t,e,n),s=k("dtype",t,e,n);return[fr(r,k("value",t,e,n),s)]}case"LinSpace":return[vr(k("start",t,e,n),k("stop",t,e,n),k("num",t,e,n))];case"Multinomial":{const r=k("logits",t,e,n),s=k("numSamples",t,e,n),a=k("seed",t,e,n);return[Jr(r,s,a)]}case"OneHot":{const r=k("indices",t,e,n),s=k("depth",t,e,n),a=k("onValue",t,e,n),o=k("offValue",t,e,n);return[es(r,s,a,o)]}case"Ones":return[Hr(k("shape",t,e,n),k("dtype",t,e,n))];case"OnesLike":return[ns(k("x",t,e,n))];case"RandomUniform":return[Ts(k("shape",t,e,n),k("minval",t,e,n),k("maxval",t,e,n),k("dtype",t,e,n))];case"Range":return[_s(k("start",t,e,n),k("stop",t,e,n),k("step",t,e,n),k("dtype",t,e,n))];case"TruncatedNormal":{const r=k("shape",t,e,n),s=k("mean",t,e,n),a=k("stdDev",t,e,n),o=k("seed",t,e,n);return[ea(r,s,a,k("dtype",t,e,n),o)]}case"Zeros":return[Wr(k("shape",t,e,n),k("dtype",t,e,n))];case"ZerosLike":return[ar(k("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"dynamic":return(async(t,e,n)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=mo(t,e,n),p=await no.nonMaxSuppressionWithScoreAsync(r,s,a,o,i,u);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=mo(t,e,n),u=k("padToMaxOutputSize",t,e,n),p=await no.nonMaxSuppressionPaddedAsync(r,s,a,o,i,u);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:a,iouThreshold:o,scoreThreshold:i}=mo(t,e,n);return[await no.nonMaxSuppressionAsync(r,s,a,o,i)]}case"Where":{const r=dn(k("condition",t,e,n),"bool"),s=[await sa(r)];return r.dispose(),s}case"ListDiff":return Cs(k("x",t,e,n),k("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s);case"evaluation":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"TopKV2":{const r=k("x",t,e,n),s=k("k",t,e,n),a=k("sorted",t,e,n),o=ta(r,s,a);return[o.values,o.indices]}case"Unique":{const r=k("x",t,e,n),s=na(r);return[s.values,s.indices]}case"UniqueV2":{const r=k("x",t,e,n),s=k("axis",t,e,n),a=na(r,s);return[a.values,a.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"image":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"ResizeBilinear":{const r=k("images",t,e,n),s=k("size",t,e,n),a=k("alignCorners",t,e,n),o=k("halfPixelCenters",t,e,n);return[no.resizeBilinear(r,[s[0],s[1]],a,o)]}case"ResizeNearestNeighbor":{const r=k("images",t,e,n),s=k("size",t,e,n),a=k("alignCorners",t,e,n),o=k("halfPixelCenters",t,e,n);return[no.resizeNearestNeighbor(r,[s[0],s[1]],a,o)]}case"CropAndResize":{const r=k("image",t,e,n),s=k("boxes",t,e,n),a=k("boxInd",t,e,n),o=k("cropSize",t,e,n),i=k("method",t,e,n),u=k("extrapolationValue",t,e,n);return[no.cropAndResize(r,s,a,o,i,u)]}case"ImageProjectiveTransformV3":{const r=k("images",t,e,n),s=k("transforms",t,e,n),a=k("outputShape",t,e,n),o=k("fillValue",t,e,n),i=k("interpolation",t,e,n),u=k("fillMode",t,e,n);return[no.transform(r,s,i.toLowerCase(),u.toLowerCase(),o,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"graph":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const r=k("default",t,e,n);return[w(t.name,e,n)||r];case"Placeholder":return[w(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[E(k("x",t,e,n))];case"IdentityN":return k("x",t,e,n).map((t=>E(t)));case"Snapshot":return[E(k("x",t,e,n))];case"Shape":return[Xs(k("x",t,e,n).shape,"int32")];case"ShapeN":return k("x",t,e,n).map((t=>Xs(t.shape)));case"Size":return[Ms(k("x",t,e,n).size,"int32")];case"Rank":return[Ms(k("x",t,e,n).rank,"int32")];case"NoOp":return[Ms(1)];case"Print":const s=k("x",t,e,n),a=k("data",t,e,n),o=k("message",t,e,n),i=k("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let t=0;t<a.length;t++)console.log(Array.prototype.slice.call(a[t].dataSync()).slice(0,i));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"logical":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Equal":return[rr(k("a",t,e,n),k("b",t,e,n))];case"NotEqual":return[ts(k("a",t,e,n),k("b",t,e,n))];case"Greater":return[br(k("a",t,e,n),k("b",t,e,n))];case"GreaterEqual":return[xr(k("a",t,e,n),k("b",t,e,n))];case"Less":return[Tr(k("a",t,e,n),k("b",t,e,n))];case"LessEqual":return[_r(k("a",t,e,n),k("b",t,e,n))];case"LogicalAnd":return[zr(k("a",t,e,n),k("b",t,e,n))];case"LogicalNot":return[Lr(k("a",t,e,n))];case"LogicalOr":return[Br(k("a",t,e,n),k("b",t,e,n))];case"Select":case"SelectV2":return[sr(k("condition",t,e,n),k("a",t,e,n),k("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"matrices":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Sn(k("a",t,e,n),k("b",t,e,n),k("transposeA",t,e,n),k("transposeB",t,e,n))];case"Einsum":return[ir(k("equation",t,e,n),...k("tensors",t,e,n))];case"Transpose":return[aa(k("x",t,e,n),k("perm",t,e,n))];case"_FusedMatMul":const[r,s]=k("fusedOps",t,e,n),a="biasadd"===r,o="prelu"===s,i=k("numArgs",t,e,n),u=k("leakyreluAlpha",t,e,n);if(a){if(o&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[p,l]=k("args",t,e,n);return[wa({a:k("a",t,e,n),b:k("b",t,e,n),transposeA:k("transposeA",t,e,n),transposeB:k("transposeB",t,e,n),bias:p,activation:s,preluActivationWeights:l,leakyreluAlpha:u})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"normalization":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[On(k("x",t,e,n),k("mean",t,e,n),k("variance",t,e,n),k("offset",t,e,n),k("scale",t,e,n),k("epsilon",t,e,n))];case"LRN":return[Sr(k("x",t,e,n),k("radius",t,e,n),k("bias",t,e,n),k("alpha",t,e,n),k("beta",t,e,n))];case"Softmax":return[Ls(k("x",t,e,n))];case"LogSoftmax":return[Cr(k("x",t,e,n))];case"SparseToDense":return[la(k("sparseIndices",t,e,n),k("outputShape",t,e,n),k("sparseValues",t,e,n),k("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"reduction":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Max":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[Or(k("x",t,e,n),r,s)]}case"Mean":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[Ur(k("x",t,e,n),r,s)]}case"Min":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[Gr(k("x",t,e,n),r,s)]}case"Sum":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[Fr(k("x",t,e,n),r,s)]}case"All":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[rn(k("x",t,e,n),r,s)]}case"Any":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[sn(k("x",t,e,n),r,s)]}case"ArgMax":{const r=k("axis",t,e,n);return[an(k("x",t,e,n),r)]}case"ArgMin":{const r=k("axis",t,e,n);return[on(k("x",t,e,n),r)]}case"Prod":{const r=k("axis",t,e,n),s=k("keepDims",t,e,n);return[is(k("x",t,e,n),r,s)]}case"Cumprod":{const r=k("axis",t,e,n),s=k("exclusive",t,e,n),a=k("reverse",t,e,n);return[Gn(k("x",t,e,n),r,s,a)]}case"Cumsum":{const r=k("axis",t,e,n),s=k("exclusive",t,e,n),a=k("reverse",t,e,n);return[Zn(k("x",t,e,n),r,s,a)]}case"Bincount":const r=k("x",t,e,n),s=k("weights",t,e,n),a=k("size",t,e,n);return[Mn(r,s,a)];case"DenseBincount":{const r=k("x",t,e,n),s=k("weights",t,e,n),a=k("size",t,e,n),o=k("binaryOutput",t,e,n);return[Qn(r,s,a,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"slice_join":return t.tidy((()=>((t,e,r)=>{switch(t.op){case"ConcatV2":case"Concat":{const n=k("n",t,e,r),s=k("axis",t,e,r);let a=k("tensors",t,e,r);return a=a.slice(0,n),[vn(a,s)]}case"Gather":{const n=k("x",t,e,r),s=k("indices",t,e,r);return[gr(n,dn(s,"int32"),0)]}case"GatherV2":{const n=k("axis",t,e,r),s=k("batchDims",t,e,r),a=k("x",t,e,r),o=k("indices",t,e,r);return[gr(a,dn(o,"int32"),n,s)]}case"Reverse":{const n=k("dims",t,e,r),s=[];for(let t=0;t<n.length;t++)n[t]&&s.push(t);const a=k("x",t,e,r);return[Is(a,s)]}case"ReverseV2":{const n=k("axis",t,e,r),s=k("x",t,e,r);return[Is(s,n)]}case"Slice":{const n=k("begin",t,e,r),s=k("size",t,e,r);return[In(k("x",t,e,r),n,s)]}case"StridedSlice":{const n=k("begin",t,e,r),s=k("end",t,e,r),a=k("strides",t,e,r),o=k("beginMask",t,e,r),i=k("endMask",t,e,r),u=k("ellipsisMask",t,e,r),p=k("newAxisMask",t,e,r),l=k("shrinkAxisMask",t,e,r),c=k("x",t,e,r);return[Qs(c,n,s,a,o,i,u,p,l)]}case"Pack":return l((()=>{const s=k("axis",t,e,r),a=k("tensors",t,e,r),o=a[0].shape,i=Hs(a[0]).shape,u=a.map((t=>{const e=n.arraysEqual(t.shape,o);if(!e&&!n.arraysEqual(Hs(t).shape,i))throw new Error("the input tensors shape does not match");return e?t:kn(t,o)}));return[Gs(u,s)]}));case"Unpack":{const n=k("axis",t,e,r),s=k("tensor",t,e,r);return ra(s,n)}case"Tile":{const n=k("reps",t,e,r);return[dr(k("x",t,e,r),n)]}case"Split":case"SplitV":{const n=k("axis",t,e,r),s=k("numOrSizeSplits",t,e,r),a=k("x",t,e,r);return qs(a,s,n)}case"ScatterNd":{const n=k("indices",t,e,r),s=k("values",t,e,r),a=k("shape",t,e,r);return[pa(n,s,a)]}case"GatherNd":{const n=k("x",t,e,r),s=k("indices",t,e,r);return[ca(n,s)]}case"SparseToDense":{const n=k("sparseIndices",t,e,r),s=k("outputShape",t,e,r),a=k("sparseValues",t,e,r),o=k("defaultValue",t,e,r);return[la(n,a,s,a.dtype===o.dtype?o:dn(o,a.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"sparse":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:s,emptyRowIndicator:a,reverseIndexMap:o}=ro.sparseFillEmptyRows(k("indices",t,e,n),k("values",t,e,n),k("denseShape",t,e,n),k("defaultValue",t,e,n));return[r,s,a,o]}case"SparseReshape":{const{outputIndices:r,outputShape:s}=ro.sparseReshape(k("inputIndices",t,e,n),k("inputShape",t,e,n),k("newShape",t,e,n));return[r,s]}case"SparseSegmentMean":return[ro.sparseSegmentMean(k("data",t,e,n),k("indices",t,e,n),k("segmentIds",t,e,n))];case"SparseSegmentSum":return[ro.sparseSegmentSum(k("data",t,e,n),k("indices",t,e,n),k("segmentIds",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"spectral":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"FFT":return[Bs(k("x",t,e,n))];case"IFFT":return[Ps(k("x",t,e,n))];case"RFFT":return[js(k("x",t,e,n))];case"IRFFT":return[Ks(k("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"string":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:s}=so.stringNGrams(k("data",t,e,n),k("dataSplits",t,e,n),k("separator",t,e,n),k("nGramWidths",t,e,n),k("leftPad",t,e,n),k("rightPad",t,e,n),k("padWidth",t,e,n),k("preserveShortSequences",t,e,n));return[r,s]}case"StringSplit":{const{indices:r,values:s,shape:a}=so.stringSplit(k("input",t,e,n),k("delimiter",t,e,n),k("skipEmpty",t,e,n));return[r,s,a]}case"StringToHashBucketFast":return[so.stringToHashBucketFast(k("input",t,e,n),k("numBuckets",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"transformation":return t.tidy((()=>((t,e,n)=>{switch(t.op){case"Cast":return[dn(k("x",t,e,n),k("dtype",t,e,n))];case"ExpandDims":{const r=k("axis",t,e,n);return[cr(k("x",t,e,n),r)]}case"Squeeze":{const r=k("axis",t,e,n);return[Hs(k("x",t,e,n),r)]}case"Reshape":return[kn(k("x",t,e,n),k("shape",t,e,n))];case"MirrorPad":return[Qr(k("x",t,e,n),k("padding",t,e,n),k("mode",t,e,n))];case"PadV2":case"Pad":return[rs(k("x",t,e,n),k("padding",t,e,n),k("constantValue",t,e,n))];case"SpaceToBatchND":{const r=k("blockShape",t,e,n),s=k("paddings",t,e,n);return[ss(k("x",t,e,n),r,s)]}case"BatchToSpaceND":{const r=k("blockShape",t,e,n),s=k("crops",t,e,n);return[An(k("x",t,e,n),r,s)]}case"DepthToSpace":{const r=k("blockSize",t,e,n),s=k("dataFormat",t,e,n).toUpperCase();return[Yn(k("x",t,e,n),r,s)]}case"BroadcastTo":return[Cn(k("x",t,e,n),k("shape",t,e,n))];case"BroadcastArgs":return[Fn(k("s0",t,e,n),k("s1",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=k("keyDType",t,e,n),a=k("valueDType",t,e,n),o=new fo(s,a);return r.addHashTable(t.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=k("tableHandle",t,e,n,r),a=k("keys",t,e,n),o=k("values",t,e,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=k("tableHandle",t,e,n,r),a=k("keys",t,e,n),o=k("defaultValue",t,e,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=k("tableHandle",t,e,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(e,r,s,a);case"custom":const o=x(e.op);if(o&&o.customExecutor)return o.customExecutor(new ut(e,r,s));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,r,s);return t.util.isPromise(o)?o.then((t=>[].concat(t))):[].concat(o)}class go{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function bo(t,e,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,p=Object.keys(t).map((t=>v(t)[0]));let l=[];null!=r&&(l=r.map((t=>v(t.name)[0])));const c=[...e];for(;c.length>0;){const t=c.pop();(wo(t)||To(t)||_o(t))&&null==o&&(o=t,i=o.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&(-1===p.indexOf(t.name)&&-1===l.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),c.push(t))})):a.push(t.name)))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const xo=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],No=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ko=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function wo(t){return xo.indexOf(t.op)>=0}function To(t){return No.indexOf(t.op)>=0}function _o(t){return ko.indexOf(t.op)>=0}class vo{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new vo(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=bo(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((t=>v(t)[0])).map((e=>t.nodes[e])),i=t.initNodes;o.forEach((t=>{r.has(t.name)&&a.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&a.push(t)})),null!=i&&i.forEach((t=>{r.has(t.name)&&a.push(t)}));const u=new Set,p=[];for(;a.length>0;){const t=a.pop();u.add(t.name),e[t.name]||p.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&a.push(t)}))}return p}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const r=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const s=r.map((t=>this.graph.nodes[v(t)[0]])),a=e.map((t=>v(t)[0]));let o=a.map((t=>this.graph.nodes[t]));this.resetIntermediateTensors(),0===o.length&&(o=this._outputs);const i=this.getCompilationKey(s,o);let u=this.compiledMap.get(i);null==u&&(u=this.compile(t,o),this.compiledMap.set(i,u));const p={},c={};return l((()=>{const r=new go(this.weightMap,p,c,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=v(e),a=[];a[r]=t[e],s[n]=a}));const o=this.getFrozenTensorIds(s),i={};for(let t=0;t<u.length;t++){const e=u[t];if(!s[e.name]){const t=yo(e,s,r,this._resourceManager);if(n.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.checkTensorForDisposal(e.name,e,s,r,o,a,i)}}return null==this.parent&&r.dispose(o),e.map((t=>w(t,s,r)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,a,o){"control"!==e.category&&-1===a.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(o[t.id]=(o[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const a=function(t,e,n){return e[_(t,n.currentContextId)]}(t.name,n,r);null!=a&&a.forEach((t=>{if(t&&!t.kept&&!s.has(t.id)){const n=o[t.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=T(e.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=t}else t.dispose();delete o[t.id]}else null!=n&&o[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((t=>this.intermediateTensors[t].forEach((t=>t.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((t=>{this.tensorsMap[t].forEach((t=>{!t||t.kept||t.isDisposed||this.keepIds.has(t.id)||t.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const t in this.intermediateTensors)this.intermediateTensors[t].forEach((t=>t.dispose())),delete this.intermediateTensors[t]}async _executeAsync(t,n,r=!1,s={},a={}){r||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),n=this.mapOutputs(n),this.checkOutputs(n));try{this.keepTensorForDebug=e().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(t){console.warn(t.message)}this.resetIntermediateTensors();const o=new go(this.weightMap,s,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,o,n,r);const i=n.map((t=>w(t,this.tensorsMap,o))),u=i.map((t=>t.id)),p=Object.keys(t).map((e=>t[e].id));return this.keepIds=new Set([...u,...p,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&o.dispose(this.keepIds),i}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),a=s.map((t=>this.graph.nodes[v(t)[0]])),o=n.map((t=>v(t)[0]));let i=o.map((t=>this.graph.nodes[t]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:p,dynamicNode:l,syncInputs:c}=bo(t,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=v(e),s=[];s[r]=t[e],d[n]=s}));const m={},f=this.getFrozenTensorIds(d),y={};for(;h.length>0;){const t=this.processStack(a,h,e,d,y,f,o,m,u);await Promise.all(t)}null!=l||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter((t=>!wo(t)&&!w(t.name,d,e))).map((t=>t.name));if(g.length>0){let t="";throw null!=l&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${p}]. ${t}`)}return d}processStack(t,e,r,s,a,o,i,u,p){const l=[];for(;e.length>0;){const t=e.pop();r.currentContext=t.contexts;let c="";if("Enter"===t.node.op&&k("isConstant",t.node,s,r)&&([c]=T(t.node.name,r)),null==s[t.node.name]){const h=yo(t.node,s,r,this._resourceManager);c||([c]=T(t.node.name,r));const d=r.currentContext;n.isPromise(h)?l.push(h.then((n=>(s[c]=n,r.currentContext=d,this.checkTensorForDisposal(c,t.node,s,r,o,i,u),this.processChildNodes(t.node,e,r,s,a,p),n)))):(s[c]=h,this.checkTensorForDisposal(c,t.node,s,r,o,i,u),this.processChildNodes(t.node,e,r,s,a,p))}else this.processChildNodes(t.node,e,r,s,a,p)}return l}processChildNodes(t,e,n,r,s,a){t.children.forEach((t=>{const[o]=T(t.name,n);!s[o]&&a.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!w(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!w(t,r,n)))&&(s[o]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const r=t[e],[s]=v(e),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const t=a.attrParams.shape.value,e=t.length===r.shape.length&&r.shape.every(((e,n)=>-1===t[n]||t[n]===e));n.assert(e,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${t}], but was [${r.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&n.assert(r.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${r.dtype}`))}))}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=v(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=v(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class So{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class Eo{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new So}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=d.browserHTTPRequest(t,this.loadOptions);else{const e=d.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(d.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=d.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new vo(H.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=H.Instance.transformGraph(t.modelInitializer);this.initializer=new vo(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"==typeof t){const e=d.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof m||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function $o(t,e={}){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith("/")||(t+="/"),t=`${t}model.json?tfjs-format=file`);const n=new Eo(t,e);return await n.load(),n}const Io="3.15.0";export{Eo as GraphModel,N as deregisterOp,$o as loadGraphModel,b as registerOp,Io as version_converter};
//# sourceMappingURL=tf-converter.fesm.min.js.map
