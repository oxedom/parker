/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
import * as tfc from '@tensorflow/tfjs-core';
import { Dataset, LazyIterator } from './dataset_stub';
function mergeBatchSizeAndShape(batchSize, shape) {
    if (Array.isArray(shape)) {
        return [batchSize].concat(shape);
    }
    else {
        const output = {};
        for (const name in shape) {
            output[name] = [batchSize].concat(shape[name]);
        }
        return output;
    }
}
function generateRandomTensorContainer(shape) {
    let output;
    if (Array.isArray(shape)) {
        output = tfc.randomNormal(shape);
    }
    else {
        output = {};
        for (const name in shape) {
            output[name] = tfc.randomNormal(shape[name]);
        }
    }
    return output;
}
class FakeNumericIterator extends LazyIterator {
    constructor(args) {
        super();
        this.tensorIndex = 0;
        this.xBatchShape = mergeBatchSizeAndShape(args.batchSize, args.xShape);
        this.yBatchShape = mergeBatchSizeAndShape(args.batchSize, args.yShape);
        this.numBatches = args.numBatches;
        this.batchCount = 0;
        this.xTensorsFunc = args.xTensorsFunc;
        this.yTensorsFunc = args.yTensorsFunc;
        // Sanity check on the preset tensors.
        tfc.util.assert(this.xTensorsFunc == null && this.yTensorsFunc == null ||
            this.xTensorsFunc != null && this.yTensorsFunc != null, () => 'presetXTensors and presetYTensors must be both null/undefined ' +
            'or both set.');
    }
    async next() {
        const done = ++this.batchCount > this.numBatches;
        if (done) {
            return { done, value: null };
        }
        if (this.xTensorsFunc == null) {
            // Generate data randomly.
            return {
                done,
                value: done ? null : {
                    xs: generateRandomTensorContainer(this.xBatchShape),
                    ys: generateRandomTensorContainer(this.yBatchShape)
                }
            };
        }
        else {
            // Use preset tensors.
            if ((this.batchCount - 1) % this.numBatches === 0) {
                this.xTensorValues = this.xTensorsFunc();
                this.yTensorValues = this.yTensorsFunc();
                this.tensorIndex = 0;
            }
            const index = this.tensorIndex++;
            let xs;
            if (Array.isArray(this.xTensorValues)) {
                xs = this.xTensorValues[index];
                tfc.util.assert(tfc.util.arraysEqual(xs.shape, this.xBatchShape), () => `Shape mismatch: expected: ${JSON.stringify(this.xBatchShape)}; ` +
                    `actual: ${JSON.stringify(xs.shape)}`);
            }
            else {
                xs = {};
                for (const key in this.xTensorValues) {
                    xs[key] = this.xTensorValues[key][index];
                    tfc.util.assert(tfc.util.arraysEqual(xs[key].shape, this.xBatchShape), () => `Shape mismatch: expected: ${JSON.stringify(this.xBatchShape)}; ` +
                        `actual: ${JSON.stringify(xs.shape)}`);
                }
            }
            let ys;
            if (Array.isArray(this.yTensorValues)) {
                // Get preset ys tensors for single-output models.
                ys = this.yTensorValues[index];
                tfc.util.assert(tfc.util.arraysEqual(ys.shape, this.yBatchShape), () => `Shape mismatch: expected: ${JSON.stringify(this.yBatchShape)}; ` +
                    `actual: ${JSON.stringify(ys.shape)}`);
            }
            else {
                // Get preset ys tensors for multi-output models.
                ys = {};
                this.yBatchShape = this.yBatchShape;
                for (const key in this.yTensorValues) {
                    ys[key] = this.yTensorValues[key][index];
                    tfc.util.assert(tfc.util.arraysEqual(ys[key].shape, this.yBatchShape[key]), () => `Shape mismatch: expected: ${JSON.stringify(this.yBatchShape)}; ` +
                        `actual: ${JSON.stringify(ys[key].shape)}`);
                }
            }
            return { done, value: { xs, ys } };
        }
    }
}
/**
 * A fake dataset with configurable feature and target shapes.
 *
 * The batch size and # of batches are also configurable.
 *
 * The iterator from the dataset always generate random-normal float32 values.
 */
export class FakeNumericDataset extends Dataset {
    constructor(args) {
        super();
        this.args = args;
        tfc.util.assert(args.batchSize > 0 && Number.isInteger(args.batchSize), () => `batchSize must be a positive integer, but got ${args.batchSize}`);
        tfc.util.assert(args.numBatches > 0 && Number.isInteger(args.numBatches), () => `numBatches must be positive integer, but got ${args.numBatches}`);
        this.size = args.numBatches;
    }
    async iterator() {
        return new FakeNumericIterator(this.args);
    }
}
// We can't use Dataset.map(...) because we don't depend on tfjs-data here,
// so we manually transform the above {xs, ys} dataset to the [xs, ys] form.
export class FakeNumericDatasetLegacyArrayForm extends Dataset {
    constructor(args) {
        super();
        this.args = args;
        this.ds = new FakeNumericDataset(args);
    }
    async iterator() {
        const it = await this.ds.iterator();
        return new FakeNumericIteratorLegacyArrayForm(it);
    }
}
class FakeNumericIteratorLegacyArrayForm extends LazyIterator {
    constructor(it) {
        super();
        this.it = it;
    }
    async next() {
        const result = await this.it.next();
        return {
            done: result.done,
            value: result.value == null ? null : [result.value.xs, result.value.ys]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,