{"ast":null,"code":"var _jsxFileName = \"/home/sam/projects/parker/client/src/comps/Camera.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:2000/');\nconst Camera = () => {\n  _s();\n  const videoRef = useRef(null);\n  const getVideo = () => {\n    socket.connect();\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        width: 720\n      }\n    }).then(stream => {\n      let video = videoRef.current;\n      video.srcObject = stream;\n      video.play();\n      // socket.emit('stream', stream);\n\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      // set the canvas width and height to match the video dimensions\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      setInterval(() => {\n        // draw the current video frame onto the canvas\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        // get the image data from the canvas\n        const imageData = canvas.toDataURL();\n        // send the image data over the socket connection\n        socket.emit('stream', imageData);\n      }, 1000 / 30); // send 30 frames per second\n    }).catch(err => {\n      console.error(\"error:\", err);\n    });\n    socket.on('output', data => {\n      console.log('hello world');\n    });\n  };\n  useEffect(() => {\n    getVideo();\n  }, [videoRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: videoRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Server \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Camera, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = Camera;\nexport default Camera;\nvar _c;\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"names":["React","useEffect","useRef","io","socket","Camera","videoRef","getVideo","connect","navigator","mediaDevices","getUserMedia","video","width","then","stream","current","srcObject","play","canvas","document","createElement","ctx","getContext","videoWidth","height","videoHeight","setInterval","drawImage","imageData","toDataURL","emit","catch","err","console","error","on","data","log"],"sources":["/home/sam/projects/parker/client/src/comps/Camera.js"],"sourcesContent":["\nimport React, { useEffect, useRef } from \"react\";\nimport io from 'socket.io-client';\n\n\nconst socket = io('http://localhost:2000/')\n\nconst Camera = () => {\n\n  \n  const videoRef = useRef(null);\n  const getVideo = () => {\n    socket.connect()\n    navigator.mediaDevices\n      .getUserMedia({ video: { width:  720} })\n      .then(stream => {\n        \n        let video = videoRef.current;\n        video.srcObject = stream;\n        video.play();\n        // socket.emit('stream', stream);\n\n        \n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        // set the canvas width and height to match the video dimensions\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n\n        setInterval(() => {\n          // draw the current video frame onto the canvas\n          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n          // get the image data from the canvas\n          const imageData = canvas.toDataURL();\n          // send the image data over the socket connection\n          socket.emit('stream', imageData);\n        }, 1000 / 30); // send 30 frames per second\n\n\n\n\n\n\n      })\n      .catch(err => {\n        console.error(\"error:\", err);\n      });\n    socket.on('output', (data) => {console.log('hello world')}) \n  };\n\n    useEffect(() => {\n    getVideo();\n  }, [videoRef]);\n\n\n\n  return (\n    <div>\n      <div>\n  \n        <video ref={videoRef} />\n        <h1> Server </h1>\n      </div>\n    </div>\n  );\n\n};\n\nexport default Camera;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,EAAE,MAAM,kBAAkB;AAAC;AAGlC,MAAMC,MAAM,GAAGD,EAAE,CAAC,wBAAwB,CAAC;AAE3C,MAAME,MAAM,GAAG,MAAM;EAAA;EAGnB,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMK,QAAQ,GAAG,MAAM;IACrBH,MAAM,CAACI,OAAO,EAAE;IAChBC,SAAS,CAACC,YAAY,CACnBC,YAAY,CAAC;MAAEC,KAAK,EAAE;QAAEC,KAAK,EAAG;MAAG;IAAE,CAAC,CAAC,CACvCC,IAAI,CAACC,MAAM,IAAI;MAEd,IAAIH,KAAK,GAAGN,QAAQ,CAACU,OAAO;MAC5BJ,KAAK,CAACK,SAAS,GAAGF,MAAM;MACxBH,KAAK,CAACM,IAAI,EAAE;MACZ;;MAGA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnC;MACAJ,MAAM,CAACN,KAAK,GAAGD,KAAK,CAACY,UAAU;MAC/BL,MAAM,CAACM,MAAM,GAAGb,KAAK,CAACc,WAAW;MAEjCC,WAAW,CAAC,MAAM;QAChB;QACAL,GAAG,CAACM,SAAS,CAAChB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEO,MAAM,CAACN,KAAK,EAAEM,MAAM,CAACM,MAAM,CAAC;QACvD;QACA,MAAMI,SAAS,GAAGV,MAAM,CAACW,SAAS,EAAE;QACpC;QACA1B,MAAM,CAAC2B,IAAI,CAAC,QAAQ,EAAEF,SAAS,CAAC;MAClC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;IAOjB,CAAC,CAAC,CACDG,KAAK,CAACC,GAAG,IAAI;MACZC,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEF,GAAG,CAAC;IAC9B,CAAC,CAAC;IACJ7B,MAAM,CAACgC,EAAE,CAAC,QAAQ,EAAGC,IAAI,IAAK;MAACH,OAAO,CAACI,GAAG,CAAC,aAAa,CAAC;IAAA,CAAC,CAAC;EAC7D,CAAC;EAECrC,SAAS,CAAC,MAAM;IAChBM,QAAQ,EAAE;EACZ,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC;EAId,oBACE;IAAA,uBACE;MAAA,wBAEE;QAAO,GAAG,EAAEA;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG,eACxB;QAAA,UAAI;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA;EACb;IAAA;IAAA;IAAA;EAAA,QACF;AAGV,CAAC;AAAC,GA3DID,MAAM;AAAA,KAANA,MAAM;AA6DZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}