{"ast":null,"code":"// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\nexport function parse(str) {\n  const src = str,\n    b = str.indexOf('['),\n    e = str.indexOf(']');\n  if (b != -1 && e != -1) {\n    str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n  }\n  let m = re.exec(str || ''),\n    uri = {},\n    i = 14;\n  while (i--) {\n    uri[parts[i]] = m[i] || '';\n  }\n  if (b != -1 && e != -1) {\n    uri.source = src;\n    uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n    uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n    uri.ipv6uri = true;\n  }\n  uri.pathNames = pathNames(uri, uri['path']);\n  uri.queryKey = queryKey(uri, uri['query']);\n  return uri;\n}\nfunction pathNames(obj, path) {\n  const regx = /\\/{2,9}/g,\n    names = path.replace(regx, \"/\").split(\"/\");\n  if (path.slice(0, 1) == '/' || path.length === 0) {\n    names.splice(0, 1);\n  }\n  if (path.slice(-1) == '/') {\n    names.splice(names.length - 1, 1);\n  }\n  return names;\n}\nfunction queryKey(uri, query) {\n  const data = {};\n  query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n    if ($1) {\n      data[$1] = $2;\n    }\n  });\n  return data;\n}","map":{"version":3,"names":["re","parts","parse","str","src","b","indexOf","e","substring","replace","length","m","exec","uri","i","source","host","authority","ipv6uri","pathNames","queryKey","obj","path","regx","names","split","slice","splice","query","data","$0","$1","$2"],"sources":["/home/sam/projects/parker/node_modules/engine.io-client/build/esm/contrib/parseuri.js"],"sourcesContent":["// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.slice(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.slice(-1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}