{"ast":null,"code":"import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n  // some packets may be added to the array while encoding, so the initial length must be saved\n  const length = packets.length;\n  const encodedPackets = new Array(length);\n  let count = 0;\n  packets.forEach((packet, i) => {\n    // force base64 encoding for binary packets\n    encodePacket(packet, false, encodedPacket => {\n      encodedPackets[i] = encodedPacket;\n      if (++count === length) {\n        callback(encodedPackets.join(SEPARATOR));\n      }\n    });\n  });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n  const encodedPackets = encodedPayload.split(SEPARATOR);\n  const packets = [];\n  for (let i = 0; i < encodedPackets.length; i++) {\n    const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n    packets.push(decodedPacket);\n    if (decodedPacket.type === \"error\") {\n      break;\n    }\n  }\n  return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };","map":{"version":3,"names":["encodePacket","decodePacket","SEPARATOR","String","fromCharCode","encodePayload","packets","callback","length","encodedPackets","Array","count","forEach","packet","i","encodedPacket","join","decodePayload","encodedPayload","binaryType","split","decodedPacket","push","type","protocol"],"sources":["/home/sam/projects/parker/client/node_modules/engine.io-parser/build/esm/index.js"],"sourcesContent":["import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3C,MAAMC,aAAa,GAAG,CAACC,OAAO,EAAEC,QAAQ,KAAK;EACzC;EACA,MAAMC,MAAM,GAAGF,OAAO,CAACE,MAAM;EAC7B,MAAMC,cAAc,GAAG,IAAIC,KAAK,CAACF,MAAM,CAAC;EACxC,IAAIG,KAAK,GAAG,CAAC;EACbL,OAAO,CAACM,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAC3B;IACAd,YAAY,CAACa,MAAM,EAAE,KAAK,EAAEE,aAAa,IAAI;MACzCN,cAAc,CAACK,CAAC,CAAC,GAAGC,aAAa;MACjC,IAAI,EAAEJ,KAAK,KAAKH,MAAM,EAAE;QACpBD,QAAQ,CAACE,cAAc,CAACO,IAAI,CAACd,SAAS,CAAC,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;AACD,MAAMe,aAAa,GAAG,CAACC,cAAc,EAAEC,UAAU,KAAK;EAClD,MAAMV,cAAc,GAAGS,cAAc,CAACE,KAAK,CAAClB,SAAS,CAAC;EACtD,MAAMI,OAAO,GAAG,EAAE;EAClB,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAE;IAC5C,MAAMO,aAAa,GAAGpB,YAAY,CAACQ,cAAc,CAACK,CAAC,CAAC,EAAEK,UAAU,CAAC;IACjEb,OAAO,CAACgB,IAAI,CAACD,aAAa,CAAC;IAC3B,IAAIA,aAAa,CAACE,IAAI,KAAK,OAAO,EAAE;MAChC;IACJ;EACJ;EACA,OAAOjB,OAAO;AAClB,CAAC;AACD,OAAO,MAAMkB,QAAQ,GAAG,CAAC;AACzB,SAASxB,YAAY,EAAEK,aAAa,EAAEJ,YAAY,EAAEgB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}