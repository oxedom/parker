{"ast":null,"code":"import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri or options\n   * @param {Object} opts - options\n   * @api public\n   */\n  constructor(uri) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      uri = parse(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n    installTimerFunctions(this, opts);\n    this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = this.secure ? \"443\" : \"80\";\n    }\n    this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : this.secure ? \"443\" : \"80\");\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\n    this.readyState = \"\";\n    this.writeBuffer = [];\n    this.prevBufferLen = 0;\n    this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: true\n    }, opts);\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n    if (typeof this.opts.query === \"string\") {\n      this.opts.query = decode(this.opts.query);\n    }\n    // set on handshake\n    this.id = null;\n    this.upgrades = null;\n    this.pingInterval = null;\n    this.pingTimeout = null;\n    // set on heartbeat\n    this.pingTimeoutTimer = null;\n    if (typeof addEventListener === \"function\") {\n      if (this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        this.beforeunloadEventListener = () => {\n          if (this.transport) {\n            // silently close the transport\n            this.transport.removeAllListeners();\n            this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n      }\n      if (this.hostname !== \"localhost\") {\n        this.offlineEventListener = () => {\n          this.onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        addEventListener(\"offline\", this.offlineEventListener, false);\n      }\n    }\n    this.open();\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} transport name\n   * @return {Transport}\n   * @api private\n   */\n  createTransport(name) {\n    const query = Object.assign({}, this.opts.query);\n    // append engine.io protocol identifier\n    query.EIO = protocol;\n    // transport name\n    query.transport = name;\n    // session id if we already have one\n    if (this.id) query.sid = this.id;\n    const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n      query,\n      socket: this,\n      hostname: this.hostname,\n      secure: this.secure,\n      port: this.port\n    });\n    return new transports[name](opts);\n  }\n  /**\n   * Initializes transport to use and starts probe.\n   *\n   * @api private\n   */\n  open() {\n    let transport;\n    if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n      transport = \"websocket\";\n    } else if (0 === this.transports.length) {\n      // Emit error on next tick so it can be listened to\n      this.setTimeoutFn(() => {\n        this.emitReserved(\"error\", \"No transports available\");\n      }, 0);\n      return;\n    } else {\n      transport = this.transports[0];\n    }\n    this.readyState = \"opening\";\n    // Retry with the next transport if the transport is disabled (jsonp: false)\n    try {\n      transport = this.createTransport(transport);\n    } catch (e) {\n      this.transports.shift();\n      this.open();\n      return;\n    }\n    transport.open();\n    this.setTransport(transport);\n  }\n  /**\n   * Sets the current transport. Disables the existing one (if any).\n   *\n   * @api private\n   */\n  setTransport(transport) {\n    if (this.transport) {\n      this.transport.removeAllListeners();\n    }\n    // set up transport\n    this.transport = transport;\n    // set up transport listeners\n    transport.on(\"drain\", this.onDrain.bind(this)).on(\"packet\", this.onPacket.bind(this)).on(\"error\", this.onError.bind(this)).on(\"close\", reason => this.onClose(\"transport close\", reason));\n  }\n  /**\n   * Probes a transport.\n   *\n   * @param {String} transport name\n   * @api private\n   */\n  probe(name) {\n    let transport = this.createTransport(name);\n    let failed = false;\n    Socket.priorWebsocketSuccess = false;\n    const onTransportOpen = () => {\n      if (failed) return;\n      transport.send([{\n        type: \"ping\",\n        data: \"probe\"\n      }]);\n      transport.once(\"packet\", msg => {\n        if (failed) return;\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\n          this.upgrading = true;\n          this.emitReserved(\"upgrading\", transport);\n          if (!transport) return;\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n          this.transport.pause(() => {\n            if (failed) return;\n            if (\"closed\" === this.readyState) return;\n            cleanup();\n            this.setTransport(transport);\n            transport.send([{\n              type: \"upgrade\"\n            }]);\n            this.emitReserved(\"upgrade\", transport);\n            transport = null;\n            this.upgrading = false;\n            this.flush();\n          });\n        } else {\n          const err = new Error(\"probe error\");\n          // @ts-ignore\n          err.transport = transport.name;\n          this.emitReserved(\"upgradeError\", err);\n        }\n      });\n    };\n    function freezeTransport() {\n      if (failed) return;\n      // Any callback called by transport should be ignored since now\n      failed = true;\n      cleanup();\n      transport.close();\n      transport = null;\n    }\n    // Handle any error that happens while probing\n    const onerror = err => {\n      const error = new Error(\"probe error: \" + err);\n      // @ts-ignore\n      error.transport = transport.name;\n      freezeTransport();\n      this.emitReserved(\"upgradeError\", error);\n    };\n    function onTransportClose() {\n      onerror(\"transport closed\");\n    }\n    // When the socket is closed while we're probing\n    function onclose() {\n      onerror(\"socket closed\");\n    }\n    // When the socket is upgraded while we're probing\n    function onupgrade(to) {\n      if (transport && to.name !== transport.name) {\n        freezeTransport();\n      }\n    }\n    // Remove all listeners on the transport and on self\n    const cleanup = () => {\n      transport.removeListener(\"open\", onTransportOpen);\n      transport.removeListener(\"error\", onerror);\n      transport.removeListener(\"close\", onTransportClose);\n      this.off(\"close\", onclose);\n      this.off(\"upgrading\", onupgrade);\n    };\n    transport.once(\"open\", onTransportOpen);\n    transport.once(\"error\", onerror);\n    transport.once(\"close\", onTransportClose);\n    this.once(\"close\", onclose);\n    this.once(\"upgrading\", onupgrade);\n    transport.open();\n  }\n  /**\n   * Called when connection is deemed open.\n   *\n   * @api private\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n    this.emitReserved(\"open\");\n    this.flush();\n    // we check for `readyState` in case an `open`\n    // listener already closed the socket\n    if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n      let i = 0;\n      const l = this.upgrades.length;\n      for (; i < l; i++) {\n        this.probe(this.upgrades[i]);\n      }\n    }\n  }\n  /**\n   * Handles a packet.\n   *\n   * @api private\n   */\n  onPacket(packet) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      this.emitReserved(\"packet\", packet);\n      // Socket is live - any packet counts\n      this.emitReserved(\"heartbeat\");\n      switch (packet.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(packet.data));\n          break;\n        case \"ping\":\n          this.resetPingTimeout();\n          this.sendPacket(\"pong\");\n          this.emitReserved(\"ping\");\n          this.emitReserved(\"pong\");\n          break;\n        case \"error\":\n          const err = new Error(\"server error\");\n          // @ts-ignore\n          err.code = packet.data;\n          this.onError(err);\n          break;\n        case \"message\":\n          this.emitReserved(\"data\", packet.data);\n          this.emitReserved(\"message\", packet.data);\n          break;\n      }\n    } else {}\n  }\n  /**\n   * Called upon handshake completion.\n   *\n   * @param {Object} data - handshake obj\n   * @api private\n   */\n  onHandshake(data) {\n    this.emitReserved(\"handshake\", data);\n    this.id = data.sid;\n    this.transport.query.sid = data.sid;\n    this.upgrades = this.filterUpgrades(data.upgrades);\n    this.pingInterval = data.pingInterval;\n    this.pingTimeout = data.pingTimeout;\n    this.maxPayload = data.maxPayload;\n    this.onOpen();\n    // In case open handler closes socket\n    if (\"closed\" === this.readyState) return;\n    this.resetPingTimeout();\n  }\n  /**\n   * Sets and resets ping timeout timer based on server pings.\n   *\n   * @api private\n   */\n  resetPingTimeout() {\n    this.clearTimeoutFn(this.pingTimeoutTimer);\n    this.pingTimeoutTimer = this.setTimeoutFn(() => {\n      this.onClose(\"ping timeout\");\n    }, this.pingInterval + this.pingTimeout);\n    if (this.opts.autoUnref) {\n      this.pingTimeoutTimer.unref();\n    }\n  }\n  /**\n   * Called on `drain` event\n   *\n   * @api private\n   */\n  onDrain() {\n    this.writeBuffer.splice(0, this.prevBufferLen);\n    // setting prevBufferLen = 0 is very important\n    // for example, when upgrading, upgrade packet is sent over,\n    // and a nonzero prevBufferLen could cause problems on `drain`\n    this.prevBufferLen = 0;\n    if (0 === this.writeBuffer.length) {\n      this.emitReserved(\"drain\");\n    } else {\n      this.flush();\n    }\n  }\n  /**\n   * Flush write buffers.\n   *\n   * @api private\n   */\n  flush() {\n    if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n      const packets = this.getWritablePackets();\n      this.transport.send(packets);\n      // keep track of current length of writeBuffer\n      // splice writeBuffer and callbackBuffer on `drain`\n      this.prevBufferLen = packets.length;\n      this.emitReserved(\"flush\");\n    }\n  }\n  /**\n   * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n   * long-polling)\n   *\n   * @private\n   */\n  getWritablePackets() {\n    const shouldCheckPayloadSize = this.maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n    if (!shouldCheckPayloadSize) {\n      return this.writeBuffer;\n    }\n    let payloadSize = 1; // first packet type\n    for (let i = 0; i < this.writeBuffer.length; i++) {\n      const data = this.writeBuffer[i].data;\n      if (data) {\n        payloadSize += byteLength(data);\n      }\n      if (i > 0 && payloadSize > this.maxPayload) {\n        return this.writeBuffer.slice(0, i);\n      }\n      payloadSize += 2; // separator + packet type\n    }\n\n    return this.writeBuffer;\n  }\n  /**\n   * Sends a message.\n   *\n   * @param {String} message.\n   * @param {Function} callback function.\n   * @param {Object} options.\n   * @return {Socket} for chaining.\n   * @api public\n   */\n  write(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  send(msg, options, fn) {\n    this.sendPacket(\"message\", msg, options, fn);\n    return this;\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param {String} packet type.\n   * @param {String} data.\n   * @param {Object} options.\n   * @param {Function} callback function.\n   * @api private\n   */\n  sendPacket(type, data, options, fn) {\n    if (\"function\" === typeof data) {\n      fn = data;\n      data = undefined;\n    }\n    if (\"function\" === typeof options) {\n      fn = options;\n      options = null;\n    }\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n      return;\n    }\n    options = options || {};\n    options.compress = false !== options.compress;\n    const packet = {\n      type: type,\n      data: data,\n      options: options\n    };\n    this.emitReserved(\"packetCreate\", packet);\n    this.writeBuffer.push(packet);\n    if (fn) this.once(\"flush\", fn);\n    this.flush();\n  }\n  /**\n   * Closes the connection.\n   *\n   * @api public\n   */\n  close() {\n    const close = () => {\n      this.onClose(\"forced close\");\n      this.transport.close();\n    };\n    const cleanupAndClose = () => {\n      this.off(\"upgrade\", cleanupAndClose);\n      this.off(\"upgradeError\", cleanupAndClose);\n      close();\n    };\n    const waitForUpgrade = () => {\n      // wait for upgrade to finish since we can't send packets while pausing a transport\n      this.once(\"upgrade\", cleanupAndClose);\n      this.once(\"upgradeError\", cleanupAndClose);\n    };\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.readyState = \"closing\";\n      if (this.writeBuffer.length) {\n        this.once(\"drain\", () => {\n          if (this.upgrading) {\n            waitForUpgrade();\n          } else {\n            close();\n          }\n        });\n      } else if (this.upgrading) {\n        waitForUpgrade();\n      } else {\n        close();\n      }\n    }\n    return this;\n  }\n  /**\n   * Called upon transport error\n   *\n   * @api private\n   */\n  onError(err) {\n    Socket.priorWebsocketSuccess = false;\n    this.emitReserved(\"error\", err);\n    this.onClose(\"transport error\", err);\n  }\n  /**\n   * Called upon transport close.\n   *\n   * @api private\n   */\n  onClose(reason, description) {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n      // clear timers\n      this.clearTimeoutFn(this.pingTimeoutTimer);\n      // stop event from firing again for transport\n      this.transport.removeAllListeners(\"close\");\n      // ensure transport won't stay open\n      this.transport.close();\n      // ignore further transport communication\n      this.transport.removeAllListeners();\n      if (typeof removeEventListener === \"function\") {\n        removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n        removeEventListener(\"offline\", this.offlineEventListener, false);\n      }\n      // set ready state\n      this.readyState = \"closed\";\n      // clear session id\n      this.id = null;\n      // emit close event\n      this.emitReserved(\"close\", reason, description);\n      // clean buffers after, so users can still\n      // grab the buffers on `close` event\n      this.writeBuffer = [];\n      this.prevBufferLen = 0;\n    }\n  }\n  /**\n   * Filters upgrades, returning only those matching client transports.\n   *\n   * @param {Array} server upgrades\n   * @api private\n   *\n   */\n  filterUpgrades(upgrades) {\n    const filteredUpgrades = [];\n    let i = 0;\n    const j = upgrades.length;\n    for (; i < j; i++) {\n      if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n    }\n    return filteredUpgrades;\n  }\n}\nSocket.protocol = protocol;","map":{"version":3,"names":["transports","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","Socket","constructor","uri","opts","hostname","host","secure","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","addEventListener","beforeunloadEventListener","transport","removeAllListeners","close","offlineEventListener","onClose","description","open","createTransport","name","EIO","sid","socket","priorWebsocketSuccess","indexOf","length","setTimeoutFn","emitReserved","e","shift","setTransport","on","onDrain","bind","onPacket","onError","reason","probe","failed","onTransportOpen","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","off","onOpen","i","l","packet","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","clearTimeoutFn","autoUnref","unref","splice","writable","packets","getWritablePackets","shouldCheckPayloadSize","payloadSize","slice","write","options","fn","undefined","compress","push","cleanupAndClose","waitForUpgrade","removeEventListener","filteredUpgrades","j"],"sources":["/home/sam/projects/parker/node_modules/engine.io-client/build/esm/socket.js"],"sourcesContent":["import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"polling\", \"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this.beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"beforeunload\", this.beforeunloadEventListener, false);\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}