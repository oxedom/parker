{"ast":null,"code":"import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nclass TransportError extends Error {\n  constructor(reason, description, context) {\n    super(reason);\n    this.description = description;\n    this.context = context;\n    this.type = \"TransportError\";\n  }\n}\nexport class Transport extends Emitter {\n  /**\n   * Transport abstract constructor.\n   *\n   * @param {Object} options.\n   * @api private\n   */\n  constructor(opts) {\n    super();\n    this.writable = false;\n    installTimerFunctions(this, opts);\n    this.opts = opts;\n    this.query = opts.query;\n    this.readyState = \"\";\n    this.socket = opts.socket;\n  }\n  /**\n   * Emits an error.\n   *\n   * @param {String} reason\n   * @param description\n   * @param context - the error context\n   * @return {Transport} for chaining\n   * @api protected\n   */\n  onError(reason, description, context) {\n    super.emitReserved(\"error\", new TransportError(reason, description, context));\n    return this;\n  }\n  /**\n   * Opens the transport.\n   *\n   * @api public\n   */\n  open() {\n    if (\"closed\" === this.readyState || \"\" === this.readyState) {\n      this.readyState = \"opening\";\n      this.doOpen();\n    }\n    return this;\n  }\n  /**\n   * Closes the transport.\n   *\n   * @api public\n   */\n  close() {\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n      this.doClose();\n      this.onClose();\n    }\n    return this;\n  }\n  /**\n   * Sends multiple packets.\n   *\n   * @param {Array} packets\n   * @api public\n   */\n  send(packets) {\n    if (\"open\" === this.readyState) {\n      this.write(packets);\n    } else {\n      // this might happen if the transport was silently closed in the beforeunload event handler\n    }\n  }\n  /**\n   * Called upon open\n   *\n   * @api protected\n   */\n  onOpen() {\n    this.readyState = \"open\";\n    this.writable = true;\n    super.emitReserved(\"open\");\n  }\n  /**\n   * Called with data.\n   *\n   * @param {String} data\n   * @api protected\n   */\n  onData(data) {\n    const packet = decodePacket(data, this.socket.binaryType);\n    this.onPacket(packet);\n  }\n  /**\n   * Called with a decoded packet.\n   *\n   * @api protected\n   */\n  onPacket(packet) {\n    super.emitReserved(\"packet\", packet);\n  }\n  /**\n   * Called upon close.\n   *\n   * @api protected\n   */\n  onClose(details) {\n    this.readyState = \"closed\";\n    super.emitReserved(\"close\", details);\n  }\n}","map":{"version":3,"names":["decodePacket","Emitter","installTimerFunctions","TransportError","Error","constructor","reason","description","context","type","Transport","opts","writable","query","readyState","socket","onError","emitReserved","open","doOpen","close","doClose","onClose","send","packets","write","onOpen","onData","data","packet","binaryType","onPacket","details"],"sources":["/home/sam/projects/parker/client/node_modules/engine.io-client/build/esm/transport.js"],"sourcesContent":["import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,OAAO,QAAQ,8BAA8B;AACtD,SAASC,qBAAqB,QAAQ,WAAW;AACjD,MAAMC,cAAc,SAASC,KAAK,CAAC;EAC/BC,WAAW,CAACC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;IACtC,KAAK,CAACF,MAAM,CAAC;IACb,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAG,gBAAgB;EAChC;AACJ;AACA,OAAO,MAAMC,SAAS,SAAST,OAAO,CAAC;EACnC;AACJ;AACA;AACA;AACA;AACA;EACII,WAAW,CAACM,IAAI,EAAE;IACd,KAAK,EAAE;IACP,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrBV,qBAAqB,CAAC,IAAI,EAAES,IAAI,CAAC;IACjC,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,KAAK,GAAGF,IAAI,CAACE,KAAK;IACvB,IAAI,CAACC,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,MAAM,GAAGJ,IAAI,CAACI,MAAM;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,OAAO,CAACV,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;IAClC,KAAK,CAACS,YAAY,CAAC,OAAO,EAAE,IAAId,cAAc,CAACG,MAAM,EAAEC,WAAW,EAAEC,OAAO,CAAC,CAAC;IAC7E,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIU,IAAI,GAAG;IACH,IAAI,QAAQ,KAAK,IAAI,CAACJ,UAAU,IAAI,EAAE,KAAK,IAAI,CAACA,UAAU,EAAE;MACxD,IAAI,CAACA,UAAU,GAAG,SAAS;MAC3B,IAAI,CAACK,MAAM,EAAE;IACjB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;EACIC,KAAK,GAAG;IACJ,IAAI,SAAS,KAAK,IAAI,CAACN,UAAU,IAAI,MAAM,KAAK,IAAI,CAACA,UAAU,EAAE;MAC7D,IAAI,CAACO,OAAO,EAAE;MACd,IAAI,CAACC,OAAO,EAAE;IAClB;IACA,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,IAAI,CAACC,OAAO,EAAE;IACV,IAAI,MAAM,KAAK,IAAI,CAACV,UAAU,EAAE;MAC5B,IAAI,CAACW,KAAK,CAACD,OAAO,CAAC;IACvB,CAAC,MACI;MACD;IAAA;EAER;EACA;AACJ;AACA;AACA;AACA;EACIE,MAAM,GAAG;IACL,IAAI,CAACZ,UAAU,GAAG,MAAM;IACxB,IAAI,CAACF,QAAQ,GAAG,IAAI;IACpB,KAAK,CAACK,YAAY,CAAC,MAAM,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;EACIU,MAAM,CAACC,IAAI,EAAE;IACT,MAAMC,MAAM,GAAG7B,YAAY,CAAC4B,IAAI,EAAE,IAAI,CAACb,MAAM,CAACe,UAAU,CAAC;IACzD,IAAI,CAACC,QAAQ,CAACF,MAAM,CAAC;EACzB;EACA;AACJ;AACA;AACA;AACA;EACIE,QAAQ,CAACF,MAAM,EAAE;IACb,KAAK,CAACZ,YAAY,CAAC,QAAQ,EAAEY,MAAM,CAAC;EACxC;EACA;AACJ;AACA;AACA;AACA;EACIP,OAAO,CAACU,OAAO,EAAE;IACb,IAAI,CAAClB,UAAU,GAAG,QAAQ;IAC1B,KAAK,CAACG,YAAY,CAAC,OAAO,EAAEe,OAAO,CAAC;EACxC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}